<?php
/*
	Library Name: Admin Page Framework
	Library URI: http://wordpress.org/extend/plugins/admin-page-framework/
	Author:  Michael Uno
	Author URI: http://michaeluno.jp
	Version: 2.1.6
	Requirements: WordPress 3.3 or above, PHP 5.2.4 or above.
	Description: Provides simpler means of building administration pages for plugin and theme developers.

Admin Page Framework - A PHP library that enables to create WordPress admin pages
Copyright (C) 2013 Michael Uno

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/
if(!class_exists('AmazonAutoLinks_AdminPageFramework_WPUtilities')):abstract class AmazonAutoLinks_AdminPageFramework_WPUtilities{ public function doActions($arrActionHooks,$vArgs1=null,$vArgs2=null,$_and_more=null){$arrArgs=func_get_args();$arrActionHooks=$arrArgs[0];foreach(( array )$arrActionHooks as $strActionHook){$arrArgs[0]=$strActionHook;call_user_func_array('do_action',$arrArgs);}} public function addAndDoActions($oCallerObject,$arrActionHooks,$vArgs1=null,$vArgs2=null,$_and_more=null){$arrArgs=func_get_args();$oCallerObject=$arrArgs[0];$arrActionHooks=$arrArgs[1];foreach(( array )$arrActionHooks as $strActionHook){$arrArgs[1]=$strActionHook;call_user_func_array(array($this,'addAndDoAction'),$arrArgs);}} public function addAndDoAction($oCallerObject,$strActionHook,$vArgs1=null,$vArgs2=null,$_and_more=null){$intArgs=func_num_args();$arrArgs=func_get_args();$oCallerObject=$arrArgs[0];$strActionHook=$arrArgs[1];add_action($strActionHook,array($oCallerObject,$strActionHook),10,$intArgs-2);unset($arrArgs[0]);call_user_func_array('do_action',$arrArgs);} public function addAndApplyFilters(){$arrArgs=func_get_args();$oCallerObject=$arrArgs[0];$arrFilters=$arrArgs[1];$vInput=$arrArgs[2];foreach(( array )$arrFilters as $strFilter){$arrArgs[1]=$strFilter;$arrArgs[2]=$vInput;$vInput=call_user_func_array(array($this,'addAndApplyFilter'),$arrArgs);}return $vInput;} public function addAndApplyFilter(){$intArgs=func_num_args();$arrArgs=func_get_args();$oCallerObject=$arrArgs[0];$strFilter=$arrArgs[1];add_filter($strFilter,array($oCallerObject,$strFilter),10,$intArgs-2);unset($arrArgs[0]);return call_user_func_array('apply_filters',$arrArgs);} public function getFilterArrayByPrefix($strPrefix,$strClassName,$strPageSlug,$strTabSlug,$fReverse=false){$arrFilters=array();if($strTabSlug&&$strPageSlug)$arrFilters[]="{$strPrefix}{$strPageSlug}_{$strTabSlug}";if($strPageSlug)$arrFilters[]="{$strPrefix}{$strPageSlug}";if($strClassName)$arrFilters[]="{$strPrefix}{$strClassName}";return $fReverse?array_reverse($arrFilters):$arrFilters;} public function goRedirect($strURL){if(!function_exists('wp_redirect'))include_once(ABSPATH.WPINC.'/pluggable.php');die(wp_redirect($strURL));} protected function getScriptData($strPath,$strType='plugin'){$arrData=get_file_data($strPath,array('strName'=>'Name','strURI'=>'URI','strScriptName'=>'Script Name','strLibraryName'=>'Library Name','strLibraryURI'=>'Library URI','strPluginName'=>'Plugin Name','strPluginURI'=>'Plugin URI','strThemeName'=>'Theme Name','strThemeURI'=>'Theme URI','strVersion'=>'Version','strDescription'=>'Description','strAuthor'=>'Author','strAuthorURI'=>'Author URI','strTextDomain'=>'Text Domain','strDomainPath'=>'Domain Path','strNetwork'=>'Network','_sitewide'=>'Site Wide Only',),in_array($strType,array('plugin','theme'))?$strType:'plugin');switch(trim($strType)){case 'theme':$arrData['strName']=$arrData['strThemeName'];$arrData['strURI']=$arrData['strThemeURI'];break;case 'library':$arrData['strName']=$arrData['strLibraryName'];$arrData['strURI']=$arrData['strLibraryURI'];break;case 'script':$arrData['strName']=$arrData['strScriptName'];break;case 'plugin':$arrData['strName']=$arrData['strPluginName'];$arrData['strURI']=$arrData['strPluginURI'];break;default:break;}return $arrData;} public function getCurrentAdminURL(){$strRequestURI=$GLOBALS['is_IIS']?$_SERVER['PATH_INFO']:$_SERVER["REQUEST_URI"];$strPageURL=(@$_SERVER["HTTPS"]=="on")?"https://":"http://";if($_SERVER["SERVER_PORT"]!="80")$strPageURL.=$_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$strRequestURI;else $strPageURL.=$_SERVER["SERVER_NAME"].$strRequestURI;return $strPageURL;} public function getQueryAdminURL($arrAddingQueries,$arrRemovingQueryKeys=array(),$strSubjectURL=''){$strSubjectURL=$strSubjectURL?$strSubjectURL:add_query_arg($_GET,admin_url($GLOBALS['pagenow']));return $this->getQueryURL($arrAddingQueries,$arrRemovingQueryKeys,$strSubjectURL);} public function getQueryURL($arrAddingQueries,$arrRemovingQueryKeys,$strSubjectURL){$strSubjectURL=empty($arrRemovingQueryKeys)?$strSubjectURL:remove_query_arg(( array )$arrRemovingQueryKeys,$strSubjectURL);$strSubjectURL=add_query_arg($arrAddingQueries,$strSubjectURL);return $strSubjectURL;}static public function getSRCFromPath($strFilePath){$oWPStyles=new WP_Styles();$strRelativePath='/'.AmazonAutoLinks_AdminPageFramework_Utilities::getRelativePath(ABSPATH,$strFilePath);$strHref=$oWPStyles->_css_href($strRelativePath,'','');unset($oWPStyles);return $strHref;}static public function resolveSRC($strSRC,$fReturnNullIfNotExist=false){if(filter_var($strSRC,FILTER_VALIDATE_URL))return $strSRC;if(file_exists(realpath($strSRC)))return self::getSRCFromPath($strSRC);if($fReturnNullIfNotExist)return null;return $strSRC;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Utilities')):class AmazonAutoLinks_AdminPageFramework_Utilities extends AmazonAutoLinks_AdminPageFramework_WPUtilities{ public static function sanitizeSlug($strSlug){return preg_replace('/[^a-zA-Z0-9_\x7f-\xff]/','_',trim($strSlug));} public static function sanitizeString($strString){return preg_replace('/[^a-zA-Z0-9_\x7f-\xff\-]/','_',$strString);} public static function getCorrespondingArrayValue($vSubject,$strKey,$strDefault='',$fBlankToDefault=false){if(!isset($vSubject))return $strDefault;if($fBlankToDefault&&$vSubject=='')return $strDefault;if(!is_array($vSubject))return ( string )$vSubject;if(isset($vSubject[$strKey]))return $vSubject[$strKey];return $strDefault;} public static function getArrayDimension($array){return (is_array(reset($array)))?self::getArrayDimension(reset($array))+1:1;} public static function uniteArrays($arrPrecedence,$arrDefault1){$arrArgs=array_reverse(func_get_args());$arrArray=array();foreach($arrArgs as $arrArg)$arrArray=self::uniteArraysRecursive($arrArg,$arrArray);return $arrArray;} public static function uniteArraysRecursive($arrPrecedence,$arrDefault){if(is_null($arrPrecedence))$arrPrecedence=array();if(!is_array($arrDefault)||!is_array($arrPrecedence))return $arrPrecedence;foreach($arrDefault as $strKey=>$v){if(!array_key_exists($strKey,$arrPrecedence)||is_null($arrPrecedence[$strKey]))$arrPrecedence[$strKey]=$v;else {if(is_array($arrPrecedence[$strKey])&&is_array($v))$arrPrecedence[$strKey]=self::uniteArraysRecursive($arrPrecedence[$strKey],$v);}}return $arrPrecedence;}static public function getQueryValueInURLByKey($strURL,$strQueryKey){$arrURL=parse_url($strURL);parse_str($arrURL['query'],$arrQuery);return isset($arrQuery[$strQueryKey])?$arrQuery[$strQueryKey]:null;}static public function fixNumber($numToFix,$numDefault,$numMin="",$numMax=""){if(!is_numeric(trim($numToFix)))return $numDefault;if($numMin!==""&&$numToFix<$numMin)return $numMin;if($numMax!==""&&$numToFix>$numMax)return $numMax;return $numToFix;}static public function getRelativePath($from,$to){$from=is_dir($from)?rtrim($from,'\/').'/':$from;$to=is_dir($to)?rtrim($to,'\/').'/':$to;$from=str_replace('\\','/',$from);$to=str_replace('\\','/',$to);$from=explode('/',$from);$to=explode('/',$to);$relPath=$to;foreach($from as $depth=>$dir){if($dir===$to[$depth]){array_shift($relPath);}else {$remaining=count($from)-$depth;if($remaining>1){$padLength=(count($relPath)+$remaining-1)*-1;$relPath=array_pad($relPath,$padLength,'..');break;}else {$relPath[0]='./'.$relPath[0];}}}return implode('/',$relPath);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Help_Base')):abstract class AmazonAutoLinks_AdminPageFramework_Help_Base{ protected $oScreen; protected function setHelpTab($strID,$strTitle,$arrContents,$arrSideBarContents=array()){if(empty($arrContents))return;$this->oScreen=isset($this->oScreen)?$this->oScreen:get_current_screen();$this->oScreen->add_help_tab(array('id'=>$strID,'title'=>$strTitle,'content'=>implode(PHP_EOL,$arrContents),));if(!empty($arrSideBarContents))$this->oScreen->set_help_sidebar(implode(PHP_EOL,$arrSideBarContents));} protected function formatHelpDescription($strHelpDescription){return "<div class='contextual-help-description'>".$strHelpDescription."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_MetaBox_Help')):abstract class AmazonAutoLinks_AdminPageFramework_MetaBox_Help extends AmazonAutoLinks_AdminPageFramework_Help_Base{ protected function addHelpText($strHTMLContent,$strHTMLSidebarContent=""){$this->oProps->arrHelpTabText[]="<div class='contextual-help-description'>".$strHTMLContent."</div>";$this->oProps->arrHelpTabTextSide[]="<div class='contextual-help-description'>".$strHTMLSidebarContent."</div>";} protected function addHelpTextForFormFields($strFieldTitle,$strHelpText,$strHelpTextSidebar=""){$this->addHelpText("<span class='contextual-help-tab-title'>".$strFieldTitle."</span> - ".PHP_EOL.$strHelpText,$strHelpTextSidebar);} public function registerHelpTabTextForMetaBox(){if(!in_array($GLOBALS['pagenow'],array('post.php','post-new.php',)))return;if(isset($_GET['post_type'])&&!in_array($_GET['post_type'],$this->oProps->arrPostTypes))return;if(!isset($_GET['post_type'])&&!in_array('post',$this->oProps->arrPostTypes))return;if(isset($_GET['post'],$_GET['action'])&&!in_array(get_post_type($_GET['post']),$this->oProps->arrPostTypes))return;$this->setHelpTab($this->oProps->strMetaBoxID,$this->oProps->strTitle,$this->oProps->arrHelpTabText,$this->oProps->arrHelpTabTextSide);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Help')):abstract class AmazonAutoLinks_AdminPageFramework_Help extends AmazonAutoLinks_AdminPageFramework_Help_Base{ public static $arrStructure_HelpTab=array('strPageSlug'=>null,'strPageTabSlug'=>null,'strHelpTabTitle'=>null,'strHelpTabID'=>null,'strHelpTabContent'=>null,'strHelpTabSidebarContent'=>null,); public function registerHelpTabs(){$strCurrentPageSlug=isset($_GET['page'])?$_GET['page']:'';$strCurrentPageTabSlug=isset($_GET['tab'])?$_GET['tab']:(isset($this->oProps->arrDefaultInPageTabs[$strCurrentPageSlug])?$this->oProps->arrDefaultInPageTabs[$strCurrentPageSlug]:'');if(empty($strCurrentPageSlug))return;if(!$this->oProps->isPageAdded($strCurrentPageSlug))return;foreach($this->oProps->arrHelpTabs as $arrHelpTab){if($strCurrentPageSlug!=$arrHelpTab['strPageSlug'])continue;if(isset($arrHelpTab['strPageTabSlug'])&&!empty($arrHelpTab['strPageTabSlug'])&$strCurrentPageTabSlug!=$arrHelpTab['strPageTabSlug'])continue;$this->setHelpTab($arrHelpTab['strID'],$arrHelpTab['strTitle'],$arrHelpTab['arrContent'],$arrHelpTab['arrSidebar']);}} protected function addHelpTab($arrHelpTab){$arrHelpTab=( array )$arrHelpTab+AmazonAutoLinks_AdminPageFramework_Help::$arrStructure_HelpTab;if(!isset($this->oProps->arrHelpTabs[$arrHelpTab['strHelpTabID']])){$this->oProps->arrHelpTabs[$arrHelpTab['strHelpTabID']]=array('strID'=>$arrHelpTab['strHelpTabID'],'strTitle'=>$arrHelpTab['strHelpTabTitle'],'arrContent'=>!empty($arrHelpTab['strHelpTabContent'])?array($this->formatHelpDescription($arrHelpTab['strHelpTabContent'])):array(),'arrSidebar'=>!empty($arrHelpTab['strHelpTabSidebarContent'])?array($this->formatHelpDescription($arrHelpTab['strHelpTabSidebarContent'])):array(),'strPageSlug'=>$arrHelpTab['strPageSlug'],'strPageTabSlug'=>$arrHelpTab['strPageTabSlug'],);return;}if(!empty($arrHelpTab['strHelpTabContent']))$this->oProps->arrHelpTabs[$arrHelpTab['strHelpTabID']]['arrContent'][]=$this->formatHelpDescription($arrHelpTab['strHelpTabContent']);if(!empty($arrHelpTab['strHelpTabSidebarContent']))$this->oProps->arrHelpTabs[$arrHelpTab['strHelpTabID']]['arrSidebar'][]=$this->formatHelpDescription($arrHelpTab['strHelpTabSidebarContent']);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_HeadTag_Base')):abstract class AmazonAutoLinks_AdminPageFramework_HeadTag_Base{function __construct($oProps){$this->oProps=$oProps;$this->oUtil=new AmazonAutoLinks_AdminPageFramework_Utilities;add_action('admin_head',array($this,'replyToAddStyle'));add_action('admin_head',array($this,'replyToAddScript'));add_action('admin_enqueue_scripts',array($this,'replyToEnqueueScripts'));add_action('admin_enqueue_scripts',array($this,'replyToEnqueueStyles'));} public function replyToAddStyle(){} public function replyToAddScript(){} protected function enqueueSRCByConditoin(){} protected function enqueueSRC($arrEnqueueItem){if($arrEnqueueItem['strType']=='style'){wp_enqueue_style($arrEnqueueItem['strHandleID'],$arrEnqueueItem['strSRC'],$arrEnqueueItem['arrDependencies'],$arrEnqueueItem['strVersion'],$arrEnqueueItem['strMedia']);return;}wp_enqueue_script($arrEnqueueItem['strHandleID'],$arrEnqueueItem['strSRC'],$arrEnqueueItem['arrDependencies'],$arrEnqueueItem['strVersion'],$arrEnqueueItem['fInFooter']);if($arrEnqueueItem['arrTranslation'])wp_localize_script($arrEnqueueItem['strHandleID'],$arrEnqueueItem['strHandleID'],$arrEnqueueItem['arrTranslation']);} public function replyToEnqueueStyles(){foreach($this->oProps->arrEnqueuingStyles as $strKey=>$arrEnqueuingStyle)$this->enqueueSRCByConditoin($arrEnqueuingStyle);} public function replyToEnqueueScripts(){foreach($this->oProps->arrEnqueuingScripts as $strKey=>$arrEnqueuingScript)$this->enqueueSRCByConditoin($arrEnqueuingScript);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_HeadTag_Pages')):class AmazonAutoLinks_AdminPageFramework_HeadTag_Pages extends AmazonAutoLinks_AdminPageFramework_HeadTag_Base{ protected $fIsMediaUploaderScriptEnqueued=false; protected $fIsTaxonomyChecklistScriptAdded=false; protected $fIsImageFieldScriptEnqueued=false; protected $fIsMediaUploaderScriptAdded=false; protected $fIsColorFieldScriptEnqueued=false; protected $fIsDateFieldScriptEnqueued=false; public function replyToAddStyle(){$strPageSlug=isset($_GET['page'])?$_GET['page']:null;$strTabSlug=isset($_GET['tab'])?$_GET['tab']:$this->oProps->getDefaultInPageTab($strPageSlug);if(!$this->oProps->isPageAdded($strPageSlug))return;$oCaller=$this->oProps->getParentObject();$strStyle=AmazonAutoLinks_AdminPageFramework_Properties::$strDefaultStyle.PHP_EOL.$this->oProps->strStyle;$strStyle=$this->oUtil->addAndApplyFilters($oCaller,$this->oUtil->getFilterArrayByPrefix(AmazonAutoLinks_AdminPageFramework_Pages::$arrPrefixes['style_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,false),$strStyle);$strStyleIE=AmazonAutoLinks_AdminPageFramework_Properties::$strDefaultStyleIE.PHP_EOL.$this->oProps->strStyleIE;$strStyleIE=$this->oUtil->addAndApplyFilters($oCaller,$this->oUtil->getFilterArrayByPrefix(AmazonAutoLinks_AdminPageFramework_Pages::$arrPrefixes['style_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,false),$strStyleIE);if(!empty($strStyle))echo "<style type='text/css' id='admin-page-framework-style'>".$strStyle."</style>";if(!empty($strStyleIE))echo "<!--[if IE]><style type='text/css' id='admin-page-framework-style-for-IE'>".$strStyleIE."</style><![endif]-->";} public function replyToAddScript(){$strPageSlug=isset($_GET['page'])?$_GET['page']:null;$strTabSlug=isset($_GET['tab'])?$_GET['tab']:$this->oProps->getDefaultInPageTab($strPageSlug);if(!$this->oProps->isPageAdded($strPageSlug))return;$oCaller=$this->oProps->getParentObject();echo "<script type='text/javascript' id='admin-page-framework-script'>".$this->oUtil->addAndApplyFilters($oCaller,$this->oUtil->getFilterArrayByPrefix(AmazonAutoLinks_AdminPageFramework_Pages::$arrPrefixes['script_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,false),$this->oProps->strScript)."</script>";} public function enqueueStyles($arrSRCs,$strPageSlug='',$strTabSlug='',$arrCustomArgs=array()){$arrHandleIDs=array();foreach(( array )$arrSRCs as $strSRC)$arrHandleIDs[]=$this->enqueueStyle($strSRC,$strPageSlug,$strTabSlug,$arrCustomArgs);return $arrHandleIDs;} public function enqueueStyle($strSRC,$strPageSlug='',$strTabSlug='',$arrCustomArgs=array()){$strSRC=trim($strSRC);if(empty($strSRC))return '';if(isset($this->oProps->arrEnqueuingScripts[md5($strSRC)]))return '';$strSRC=$this->oUtil->resolveSRC($strSRC);$strSRCHash=md5($strSRC);$this->oProps->arrEnqueuingStyles[$strSRCHash]=$this->oUtil->uniteArrays(( array )$arrCustomArgs,array('strSRC'=>$strSRC,'strPageSlug'=>$strPageSlug,'strTabSlug'=>$strTabSlug,'strType'=>'style','strHandleID'=>'style_'.$this->oProps->strClassName.'_'.(++$this->oProps->intEnqueuedStyleIndex),),AmazonAutoLinks_AdminPageFramework_Properties::$arrStructure_EnqueuingScriptsAndStyles);return $this->oProps->arrEnqueuingStyles[$strSRCHash]['strHandleID'];} public function enqueueScripts($arrSRCs,$strPageSlug='',$strTabSlug='',$arrCustomArgs=array()){$arrHandleIDs=array();foreach(( array )$arrSRCs as $strSRC)$arrHandleIDs[]=$this->enqueueScript($strSRC,$strPageSlug,$strTabSlug,$arrCustomArgs);return $arrHandleIDs;} public function enqueueScript($strSRC,$strPageSlug='',$strTabSlug='',$arrCustomArgs=array()){$strSRC=trim($strSRC);if(empty($strSRC))return '';if(isset($this->oProps->arrEnqueuingScripts[md5($strSRC)]))return '';$strSRC=$this->oUtil->resolveSRC($strSRC);$strSRCHash=md5($strSRC);$this->oProps->arrEnqueuingScripts[$strSRCHash]=$this->oUtil->uniteArrays(( array )$arrCustomArgs,array('strPageSlug'=>$strPageSlug,'strTabSlug'=>$strTabSlug,'strSRC'=>$strSRC,'strType'=>'script','strHandleID'=>'script_'.$this->oProps->strClassName.'_'.(++$this->oProps->intEnqueuedScriptIndex),),AmazonAutoLinks_AdminPageFramework_Properties::$arrStructure_EnqueuingScriptsAndStyles);return $this->oProps->arrEnqueuingScripts[$strSRCHash]['strHandleID'];} protected function enqueueSRCByConditoin($arrEnqueueItem){$strCurrentPageSlug=isset($_GET['page'])?$_GET['page']:'';$strCurrentTabSlug=isset($_GET['tab'])?$_GET['tab']:$this->oProps->getDefaultInPageTab($strCurrentPageSlug);$strPageSlug=$arrEnqueueItem['strPageSlug'];$strTabSlug=$arrEnqueueItem['strTabSlug'];if(!$strPageSlug&&$this->oProps->isPageAdded($strCurrentPageSlug))return $this->enqueueSRC($arrEnqueueItem);if(($strPageSlug&&$strCurrentPageSlug==$strPageSlug)&&($strTabSlug&&$strCurrentTabSlug==$strTabSlug))return $this->enqueueSRC($arrEnqueueItem);if(($strPageSlug&&!$strTabSlug)&&($strCurrentPageSlug==$strPageSlug))return $this->enqueueSRC($arrEnqueueItem);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_HeadTag_PostType')):class AmazonAutoLinks_AdminPageFramework_HeadTag_PostType extends AmazonAutoLinks_AdminPageFramework_HeadTag_Base{}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_HeadTag_MetaBox')):class AmazonAutoLinks_AdminPageFramework_HeadTag_MetaBox extends AmazonAutoLinks_AdminPageFramework_HeadTag_Base{function __construct($oProps){parent::__construct($oProps);} public function replyToAddStyle(){if(!(in_array($GLOBALS['pagenow'],array('post.php','post-new.php',))&&((isset($_GET['post_type'])&&in_array($_GET['post_type'],$this->oProps->arrPostTypes))||(isset($_GET['post'],$_GET['action'])&&in_array(get_post_type($_GET['post']),$this->oProps->arrPostTypes)))))return;$strRootClassName=get_class();if(isset($GLOBALS["{$strRootClassName}_StyleLoaded"])&&$GLOBALS["{$strRootClassName}_StyleLoaded"])return;$GLOBALS["{$strRootClassName}_StyleLoaded"]=true;$oCaller=$this->oProps->getParentObject();$strStyle=AmazonAutoLinks_AdminPageFramework_Properties::$strDefaultStyle.PHP_EOL.$this->oProps->strStyle;$strStyle=$this->oUtil->addAndApplyFilters($oCaller,"style_{$this->oProps->strClassName}",$strStyle);$strStyleIE=AmazonAutoLinks_AdminPageFramework_Properties::$strDefaultStyleIE.PHP_EOL.$this->oProps->strStyleIE;$strStyleIE=$this->oUtil->addAndApplyFilters($oCaller,"style_ie_{$this->oProps->strClassName}",$strStyleIE);if(!empty($strStyle))echo "<style type='text/css' id='admin-page-framework-style-meta-box'>".$strStyle."</style>";if(!empty($strStyleIE))echo "<!--[if IE]><style type='text/css' id='admin-page-framework-style-meta-box'>".$strStyleIE."</style><![endif]-->";} public function replyToAddScript(){if(!(in_array($GLOBALS['pagenow'],array('post.php','post-new.php',))&&((isset($_GET['post_type'])&&in_array($_GET['post_type'],$this->oProps->arrPostTypes))||(isset($_GET['post'],$_GET['action'])&&in_array(get_post_type($_GET['post']),$this->oProps->arrPostTypes)))))return;$strRootClassName=get_class();if(isset($GLOBALS["{$strRootClassName}_ScriptLoaded"])&&$GLOBALS["{$strRootClassName}_ScriptLoaded"])return;$GLOBALS["{$strRootClassName}_ScriptLoaded"]=true;$oCaller=$this->oProps->getParentObject();$strScript=$this->oUtil->addAndApplyFilters($oCaller,"script_{$this->oProps->strClassName}",$this->oProps->strScript);if(!empty($strScript))echo "<script type='text/javascript' id='admin-page-framework-script-meta-box'>".$strScript."</script>";} public function enqueueStyles($arrSRCs,$arrPostTypes=array(),$arrCustomArgs=array()){$arrHandleIDs=array();foreach(( array )$arrSRCs as $strSRC)$arrHandleIDs[]=$this->enqueueStyle($strSRC,$arrPostTypes,$arrCustomArgs);return $arrHandleIDs;} public function enqueueStyle($strSRC,$arrPostTypes=array(),$arrCustomArgs=array()){$strSRC=trim($strSRC);if(empty($strSRC))return '';if(isset($this->oProps->arrEnqueuingScripts[md5($strSRC)]))return '';$strSRC=$this->oUtil->resolveSRC($strSRC);$strSRCHash=md5($strSRC);$this->oProps->arrEnqueuingStyles[$strSRCHash]=$this->oUtil->uniteArrays(( array )$arrCustomArgs,array('strSRC'=>$strSRC,'arrPostTypes'=>empty($arrPostTypes)?$this->oProps->arrPostTypes:$arrPostTypes,'strType'=>'style','strHandleID'=>'style_'.$this->oProps->strClassName.'_'.(++$this->oProps->intEnqueuedStyleIndex),),AmazonAutoLinks_AdminPageFramework_Properties::$arrStructure_EnqueuingScriptsAndStyles);return $this->oProps->arrEnqueuingStyles[$strSRCHash]['strHandleID'];} public function enqueueScripts($arrSRCs,$arrPostTypes=array(),$arrCustomArgs=array()){$arrHandleIDs=array();foreach(( array )$arrSRCs as $strSRC)$arrHandleIDs[]=$this->enqueueScript($strSRC,$arrPostTypes,$arrCustomArgs);return $arrHandleIDs;} public function enqueueScript($strSRC,$arrPostTypes=array(),$arrCustomArgs=array()){$strSRC=trim($strSRC);if(empty($strSRC))return '';if(isset($this->oProps->arrEnqueuingScripts[md5($strSRC)]))return '';$strSRC=$this->oUtil->resolveSRC($strSRC);$strSRCHash=md5($strSRC);$this->oProps->arrEnqueuingScripts[$strSRCHash]=$this->oUtil->uniteArrays(( array )$arrCustomArgs,array('strSRC'=>$strSRC,'arrPostTypes'=>empty($arrPostTypes)?$this->oProps->arrPostTypes:$arrPostTypes,'strType'=>'script','strHandleID'=>'script_'.$this->oProps->strClassName.'_'.(++$this->oProps->intEnqueuedScriptIndex),),AmazonAutoLinks_AdminPageFramework_Properties::$arrStructure_EnqueuingScriptsAndStyles);return $this->oProps->arrEnqueuingScripts[$strSRCHash]['strHandleID'];} protected function enqueueSRCByConditoin($arrEnqueueItem){$strCurrentPostType=isset($_GET['post_type'])?$_GET['post_type']:(isset($GLOBALS['typenow'])?$GLOBALS['typenow']:null);if(in_array($strCurrentPostType,$arrEnqueueItem['arrPostTypes']))return $this->enqueueSRC($arrEnqueueItem);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Pages')):abstract class AmazonAutoLinks_AdminPageFramework_Pages extends AmazonAutoLinks_AdminPageFramework_Help{ public static $arrPrefixes=array('start_'=>'start_','load_'=>'load_','do_before_'=>'do_before_','do_after_'=>'do_after_','do_form_'=>'do_form_','do_'=>'do_','head_'=>'head_','content_'=>'content_','foot_'=>'foot_','validation_'=>'validation_','export_name'=>'export_name','export_format'=>'export_format','export_'=>'export_','import_name'=>'import_name','import_format'=>'import_format','import_'=>'import_','style_'=>'style_','script_'=>'script_','field_'=>'field_','section_'=>'section_',); protected static $arrPrefixesForCallbacks=array('section_'=>'section_','field_'=>'field_','field_types_'=>'field_types_','validation_'=>'validation_',); protected static $arrScreenIconIDs=array('edit','post','index','media','upload','link-manager','link','link-category','edit-pages','page','edit-comments','themes','plugins','users','profile','user-edit','tools','admin','options-general','ms-admin','generic',); private static $arrStructure_InPageTabElements=array('strPageSlug'=>null,'strTabSlug'=>null,'strTitle'=>null,'numOrder'=>null,'fHide'=>null,'strParentTabSlug'=>null,); protected function showPageTitle($fShow=true,$strPageSlug=''){$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);if(!empty($strPageSlug))$this->oProps->arrPages[$strPageSlug]['fShowPageTitle']=$fShow;else {$this->oProps->fShowPageTitle=$fShow;foreach($this->oProps->arrPages as &$arrPage)$arrPage['fShowPageTitle']=$fShow;}} protected function showPageHeadingTabs($fShow=true,$strPageSlug=''){$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);if(!empty($strPageSlug))$this->oProps->arrPages[$strPageSlug]['fShowPageHeadingTabs']=$fShow;else {$this->oProps->fShowPageHeadingTabs=$fShow;foreach($this->oProps->arrPages as &$arrPage)$arrPage['fShowPageHeadingTabs']=$fShow;}} protected function showInPageTabs($fShow=true,$strPageSlug=''){$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);if(!empty($strPageSlug))$this->oProps->arrPages[$strPageSlug]['fShowInPageTabs']=$fShow;else {$this->oProps->fShowInPageTabs=$fShow;foreach($this->oProps->arrPages as &$arrPage)$arrPage['fShowInPageTabs']=$fShow;}} protected function setInPageTabTag($strTag='h3',$strPageSlug=''){$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);if(!empty($strPageSlug))$this->oProps->arrPages[$strPageSlug]['strInPageTabTag']=$strTag;else {$this->oProps->strInPageTabTag=$strTag;foreach($this->oProps->arrPages as &$arrPage)$arrPage['strInPageTabTag']=$strTag;}} protected function setPageHeadingTabTag($strTag='h2',$strPageSlug=''){$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);if(!empty($strPageSlug))$this->oProps->arrPages[$strPageSlug]['strPageHeadingTabTag']=$strTag;else {$this->oProps->strPageHeadingTabTag=$strTag;foreach($this->oProps->arrPages as &$arrPage)$arrPage[$strPageSlug]['strPageHeadingTabTag']=$strTag;}} protected function renderPage($strPageSlug,$strTabSlug=null){$this->oUtil->addAndDoActions($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['do_before_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,true));?>
		<div class="wrap">
			<?php
 $strHead=$this->getScreenIcon($strPageSlug);$strHead.=$this->getPageHeadingTabs($strPageSlug,$this->oProps->strPageHeadingTabTag);$strHead.=$this->getInPageTabs($strPageSlug,$this->oProps->strInPageTabTag);echo $this->oUtil->addAndApplyFilters($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['head_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,false),$strHead);?>
			<div class="admin-page-framework-container">
				<?php
 $this->showSettingsErrors();$this->oUtil->addAndDoActions($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['do_form_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,true));echo $this->getFormOpeningTag();ob_start();if($this->oProps->fEnableForm){settings_fields($this->oProps->strOptionKey);do_settings_sections($strPageSlug);}$strContent=ob_get_contents();ob_end_clean();echo $this->oUtil->addAndApplyFilters($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['content_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,false),$strContent);$this->oUtil->addAndDoActions($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['do_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,true));?>
				
			<?php echo $this->getFormClosingTag($strPageSlug,$strTabSlug);?>
			
			</div><!-- End admin-page-framework-container -->
				
			<?php	 echo $this->oUtil->addAndApplyFilters($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['foot_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,false),'');?>
		</div><!-- End Wrap -->
		<?php
 $this->oUtil->addAndDoActions($this,$this->oUtil->getFilterArrayByPrefix(self::$arrPrefixes['do_after_'],$this->oProps->strClassName,$strPageSlug,$strTabSlug,true));} private function showSettingsErrors(){if($GLOBALS['pagenow']=='options-general.php')return;$arrSettingsMessages=get_settings_errors($this->oProps->strOptionKey);if(count($arrSettingsMessages)>1)$this->removeDefaultSettingsNotice();settings_errors($this->oProps->strOptionKey);} protected function removeDefaultSettingsNotice(){global $wp_settings_errors;$arrDefaultMessages=array($this->oMsg->___('option_cleared'),$this->oMsg->___('option_updated'),);foreach(( array )$wp_settings_errors as $intIndex=>$arrDetails){if($arrDetails['setting']!=$this->oProps->strOptionKey)continue;if(in_array($arrDetails['message'],$arrDefaultMessages))unset($wp_settings_errors[$intIndex]);}} protected function getFormOpeningTag(){if(!$this->oProps->fEnableForm)return '';return "<form action='options.php' method='post' enctype='{$this->oProps->strFormEncType}'>";} protected function getFormClosingTag($strPageSlug,$strTabSlug){if(!$this->oProps->fEnableForm)return '';return "<input type='hidden' name='strPageSlug' value='{$strPageSlug}' />".PHP_EOL."<input type='hidden' name='strTabSlug' value='{$strTabSlug}' />".PHP_EOL."</form><!-- End Form -->";} private function getScreenIcon($strPageSlug){if(isset($this->oProps->arrPages[$strPageSlug]['strURLIcon32x32']))return '<div class="icon32" style="background-image: url('.$this->oProps->arrPages[$strPageSlug]['strURLIcon32x32'].');"><br /></div>';if(isset($this->oProps->arrPages[$strPageSlug]['strScreenIconID']))return '<div class="icon32" id="icon-'.$this->oProps->arrPages[$strPageSlug]['strScreenIconID'].'"><br /></div>';$oScreen=get_current_screen();$strIconIDAttribute=$this->getScreenIDAttribute($oScreen);$strClass='icon32';if(empty($strIconIDAttribute)&&$oScreen->post_type)$strClass.=' '.sanitize_html_class('icon32-posts-'.$oScreen->post_type);if(empty($strIconIDAttribute)||$strIconIDAttribute==$this->oProps->strClassName)$strIconIDAttribute='generic';return '<div id="icon-'.$strIconIDAttribute.'" class="'.$strClass.'"><br /></div>';} private function getScreenIDAttribute($oScreen){if(!empty($oScreen->parent_base))return $oScreen->parent_base;if('page'==$oScreen->post_type)return 'edit-pages';return esc_attr($oScreen->base);} private function getPageHeadingTabs($strCurrentPageSlug,$strTag='h2',$arrOutput=array()){if(!$this->oProps->arrPages[$strCurrentPageSlug]['fShowPageTitle'])return "";$strTag=$this->oProps->arrPages[$strCurrentPageSlug]['strPageHeadingTabTag']?$this->oProps->arrPages[$strCurrentPageSlug]['strPageHeadingTabTag']:$strTag;if(!$this->oProps->arrPages[$strCurrentPageSlug]['fShowPageHeadingTabs'])return "<{$strTag}>".$this->oProps->arrPages[$strCurrentPageSlug]['strPageTitle']."</{$strTag}>";foreach($this->oProps->arrPages as $arrSubPage){if(isset($arrSubPage['strPageSlug'])&&$arrSubPage['fShowPageHeadingTab']){$strClassActive=$strCurrentPageSlug==$arrSubPage['strPageSlug']?'nav-tab-active':'';$arrOutput[]="<a class='nav-tab {$strClassActive}' "."href='".$this->oUtil->getQueryAdminURL(array('page'=>$arrSubPage['strPageSlug'],'tab'=>false),$this->oProps->arrDisallowedQueryKeys)."'>".$arrSubPage['strPageTitle']."</a>";}if(isset($arrSubPage['strURL'])&&$arrSubPage['strType']=='link'&&$arrSubPage['fShowPageHeadingTab'])$arrOutput[]="<a class='nav-tab link' "."href='{$arrSubPage['strURL']}'>".$arrSubPage['strMenuTitle']."</a>";}return "<div class='admin-page-framework-page-heading-tab'><{$strTag} class='nav-tab-wrapper'>".implode('',$arrOutput)."</{$strTag}></div>";} private function getInPageTabs($strCurrentPageSlug,$strTag='h3',$arrOutput=array()){if(empty($this->oProps->arrInPageTabs[$strCurrentPageSlug]))return implode('',$arrOutput);$strCurrentTabSlug=isset($_GET['tab'])?$_GET['tab']:$this->oProps->getDefaultInPageTab($strCurrentPageSlug);$strCurrentTabSlug=$this->getParentTabSlug($strCurrentPageSlug,$strCurrentTabSlug);$strTag=$this->oProps->arrPages[$strCurrentPageSlug]['strInPageTabTag']?$this->oProps->arrPages[$strCurrentPageSlug]['strInPageTabTag']:$strTag;if(!$this->oProps->arrPages[$strCurrentPageSlug]['fShowInPageTabs'])return isset($this->oProps->arrInPageTabs[$strCurrentPageSlug][$strCurrentTabSlug]['strTitle'])?"<{$strTag}>{$this->oProps->arrInPageTabs[$strCurrentPageSlug][$strCurrentTabSlug]['strTitle']}</{$strTag}>":"";foreach($this->oProps->arrInPageTabs[$strCurrentPageSlug] as $strTabSlug=>$arrInPageTab){if($arrInPageTab['fHide']&&!isset($arrInPageTab['strParentTabSlug']))continue;$strInPageTabSlug=isset($arrInPageTab['strParentTabSlug'],$this->oProps->arrInPageTabs[$strCurrentPageSlug][$arrInPageTab['strParentTabSlug']])?$arrInPageTab['strParentTabSlug']:$arrInPageTab['strTabSlug'];$fIsActiveTab=($strCurrentTabSlug==$strInPageTabSlug);$arrOutput[$strInPageTabSlug]="<a class='nav-tab ".($fIsActiveTab?"nav-tab-active":"")."' "."href='".$this->oUtil->getQueryAdminURL(array('page'=>$strCurrentPageSlug,'tab'=>$strInPageTabSlug),$this->oProps->arrDisallowedQueryKeys)."'>".$this->oProps->arrInPageTabs[$strCurrentPageSlug][$strInPageTabSlug]['strTitle']."</a>";}return empty($arrOutput)?"":"<div class='admin-page-framework-in-page-tab'><{$strTag} class='nav-tab-wrapper in-page-tab'>".implode('',$arrOutput)."</{$strTag}></div>";} private function getParentTabSlug($strPageSlug,$strTabSlug){$strParentTabSlug=isset($this->oProps->arrInPageTabs[$strPageSlug][$strTabSlug]['strParentTabSlug'])?$this->oProps->arrInPageTabs[$strPageSlug][$strTabSlug]['strParentTabSlug']:$strTabSlug;return isset($this->oProps->arrInPageTabs[$strPageSlug][$strParentTabSlug]['fHide'])&&$this->oProps->arrInPageTabs[$strPageSlug][$strParentTabSlug]['fHide']?"":$strParentTabSlug;} protected function addInPageTab($strPageSlug,$strTabTitle,$strTabSlug,$numOrder=null,$fHide=null,$strParentTabSlug=null){$strTabSlug=$this->oUtil->sanitizeSlug($strTabSlug);$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);$intCountElement=isset($this->oProps->arrInPageTabs[$strPageSlug])?count($this->oProps->arrInPageTabs[$strPageSlug]):0;if(!empty($strTabSlug)&&!empty($strPageSlug))$this->oProps->arrInPageTabs[$strPageSlug][$strTabSlug]=array('strPageSlug'=>$strPageSlug,'strTitle'=>trim($strTabTitle),'strTabSlug'=>$strTabSlug,'numOrder'=>is_numeric($numOrder)?$numOrder:$intCountElement+10,'fHide'=>($fHide),'strParentTabSlug'=>!empty($strParentTabSlug)?$this->oUtil->sanitizeSlug($strParentTabSlug):null,);} protected function addInPageTabs($arrTab1,$arrTab2=null,$_and_more=null){foreach(func_get_args() as $arrTab){if(!is_array($arrTab))continue;$arrTab=$arrTab+self::$arrStructure_InPageTabElements;$this->addInPageTab($arrTab['strPageSlug'],$arrTab['strTitle'],$arrTab['strTabSlug'],$arrTab['numOrder'],$arrTab['fHide'],$arrTab['strParentTabSlug']);}} public function finalizeInPageTabs(){foreach($this->oProps->arrPages as $strPageSlug=>$arrPage){if(!isset($this->oProps->arrInPageTabs[$strPageSlug]))continue;$this->oProps->arrInPageTabs[$strPageSlug]=$this->oUtil->addAndApplyFilter($this,"{$this->oProps->strClassName}_{$strPageSlug}_tabs",$this->oProps->arrInPageTabs[$strPageSlug]);foreach($this->oProps->arrInPageTabs[$strPageSlug] as &$arrInPageTab)$arrInPageTab=$arrInPageTab+self::$arrStructure_InPageTabElements;uasort($this->oProps->arrInPageTabs[$strPageSlug],array($this->oProps,'sortByOrder'));foreach($this->oProps->arrInPageTabs[$strPageSlug] as $strTabSlug=>&$arrInPageTab){if(!isset($arrInPageTab['strTabSlug']))continue;$this->oProps->arrDefaultInPageTabs[$strPageSlug]=$arrInPageTab['strTabSlug'];break;}}}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Menu')):abstract class AmazonAutoLinks_AdminPageFramework_Menu extends AmazonAutoLinks_AdminPageFramework_Pages{ protected static $arrBuiltInRootMenuSlugs=array('dashboard'=>'index.php','posts'=>'edit.php','media'=>'upload.php','links'=>'link-manager.php','pages'=>'edit.php?post_type=page','comments'=>'edit-comments.php','appearance'=>'themes.php','plugins'=>'plugins.php','users'=>'users.php','tools'=>'tools.php','settings'=>'options-general.php','network admin'=>"network_admin_menu",); protected static $arrStructure_SubMenuPage=array('strPageTitle'=>null,'strPageSlug'=>null,'strScreenIcon'=>null,'strCapability'=>null,'numOrder'=>null,'fShowPageHeadingTab'=>true,'fShowInMenu'=>true,); protected function setRootMenuPage($strRootMenuLabel,$strURLIcon16x16=null,$intMenuPosition=null){$strRootMenuLabel=trim($strRootMenuLabel);$strSlug=$this->isBuiltInMenuItem($strRootMenuLabel);$this->oProps->arrRootMenu=array('strTitle'=>$strRootMenuLabel,'strPageSlug'=>$strSlug?$strSlug:$this->oProps->strClassName,'strURLIcon16x16'=>$this->oUtil->resolveSRC($strURLIcon16x16,true),'intPosition'=>$intMenuPosition,'fCreateRoot'=>$strSlug?false:true,);} protected function setRootMenuPageBySlug($strRootMenuSlug){$this->oProps->arrRootMenu['strPageSlug']=$strRootMenuSlug;$this->oProps->arrRootMenu['fCreateRoot']=false;} protected function addSubMenuPages(){foreach(func_get_args() as $arrSubMenuPage){$arrSubMenuPage=$arrSubMenuPage+self::$arrStructure_SubMenuPage;$this->addSubMenuPage($arrSubMenuPage['strPageTitle'],$arrSubMenuPage['strPageSlug'],$arrSubMenuPage['strScreenIcon'],$arrSubMenuPage['strCapability'],$arrSubMenuPage['numOrder'],$arrSubMenuPage['fShowPageHeadingTab']);}} protected function addSubMenuPage($strPageTitle,$strPageSlug,$strScreenIcon=null,$strCapability=null,$numOrder=null,$fShowPageHeadingTab=true,$fShowInMenu=true){$strPageSlug=$this->oUtil->sanitizeSlug($strPageSlug);$intCount=count($this->oProps->arrPages);$arrPreviouslySetPage=isset($this->oProps->arrPages[$strPageSlug])?$this->oProps->arrPages[$strPageSlug]:array();$arrThisPage=array('strPageTitle'=>$strPageTitle,'strPageSlug'=>$strPageSlug,'strType'=>'page','strURLIcon32x32'=>$this->oUtil->resolveSRC($strScreenIcon,true),'strScreenIconID'=>in_array($strScreenIcon,self::$arrScreenIconIDs)?$strScreenIcon:null,'strCapability'=>isset($strCapability)?$strCapability:$this->oProps->strCapability,'numOrder'=>is_numeric($numOrder)?$numOrder:$intCount+10,'fShowPageHeadingTab'=>$fShowPageHeadingTab,'fShowInMenu'=>$fShowInMenu,'fShowPageTitle'=>$this->oProps->fShowPageTitle,'fShowPageHeadingTabs'=>$this->oProps->fShowPageHeadingTabs,'fShowInPageTabs'=>$this->oProps->fShowInPageTabs,'strInPageTabTag'=>$this->oProps->strInPageTabTag,'strPageHeadingTabTag'=>$this->oProps->strPageHeadingTabTag,);$this->oProps->arrPages[$strPageSlug]=$this->oUtil->uniteArraysRecursive($arrThisPage,$arrPreviouslySetPage);} protected function isBuiltInMenuItem($strMenuLabel){$strMenuLabelLower=strtolower($strMenuLabel);if(array_key_exists($strMenuLabelLower,self::$arrBuiltInRootMenuSlugs))return self::$arrBuiltInRootMenuSlugs[$strMenuLabelLower];} private function registerRootMenuPage(){$strHookName=add_menu_page($this->oProps->strClassName,$this->oProps->arrRootMenu['strTitle'],$this->oProps->strCapability,$this->oProps->arrRootMenu['strPageSlug'],'',$this->oProps->arrRootMenu['strURLIcon16x16'],isset($this->oProps->arrRootMenu['intPosition'])?$this->oProps->arrRootMenu['intPosition']:null);} private function registerSubMenuPage($arrArgs){$arrArgs=isset($arrArgs['strType'])&&$arrArgs['strType']=='link'?$arrArgs+AmazonAutoLinks_AdminPageFramework_Link::$arrStructure_SubMenuLink:$arrArgs+self::$arrStructure_SubMenuPage;$strType=$arrArgs['strType'];$strTitle=$strType=='page'?$arrArgs['strPageTitle']:$arrArgs['strMenuTitle'];$strCapability=$arrArgs['strCapability'];$strCapability=isset($strCapability)?$strCapability:$this->strCapability;if(!current_user_can($strCapability))return;$arrResult=array();$strRootPageSlug=$this->oProps->arrRootMenu['strPageSlug'];$strMenuLabel=plugin_basename($strRootPageSlug);if($strType=='page'&&isset($arrArgs['strPageSlug'])){$strPageSlug=$arrArgs['strPageSlug'];$arrResult[$strPageSlug]=add_submenu_page($strRootPageSlug,$strTitle,$strTitle,$strCapability,$strPageSlug,array($this,$this->oProps->strClassHash.'_page_'.$strPageSlug));add_action("load-".$arrResult[$strPageSlug],array($this,"load_pre_".$strPageSlug));if(!$arrArgs['fShowInMenu']){foreach(( array )$GLOBALS['submenu'][$strMenuLabel] as $intIndex=>$arrSubMenu){if(!isset($arrSubMenu[3]))continue;if($arrSubMenu[0]==$strTitle&&$arrSubMenu[3]==$strTitle&&$arrSubMenu[2]==$strPageSlug){unset($GLOBALS['submenu'][$strMenuLabel][$intIndex]);$this->oProps->arrHiddenPages[$strPageSlug]=$strTitle;add_filter('admin_title',array($this,'fixPageTitleForHiddenPages'),10,2);break;}}}}if($strType=='link'&&$arrArgs['fShowInMenu']){if(!isset($GLOBALS['submenu'][$strMenuLabel]))$GLOBALS['submenu'][$strMenuLabel]=array();$GLOBALS['submenu'][$strMenuLabel][]=array($strTitle,$strCapability,$arrArgs['strURL'],);}return $arrResult;} public function fixPageTitleForHiddenPages($strAdminTitle,$strPageTitle){if(isset($_GET['page'],$this->oProps->arrHiddenPages[$_GET['page']]))return $this->oProps->arrHiddenPages[$_GET['page']].$strAdminTitle;return $strAdminTitle;} public function buildMenus(){if($this->oProps->arrRootMenu['fCreateRoot'])$this->registerRootMenuPage();$this->oProps->arrPages=$this->oUtil->addAndApplyFilter($this,"{$this->oProps->strClassName}_pages",$this->oProps->arrPages);uasort($this->oProps->arrPages,array($this->oProps,'sortByOrder'));foreach($this->oProps->arrPages as $arrPage){if(!isset($arrPage['strPageSlug']))continue;$this->oProps->strDefaultPageSlug=$arrPage['strPageSlug'];break;}foreach($this->oProps->arrPages as &$arrSubMenuItem)$this->oProps->arrRegisteredSubMenuPages=$this->registerSubMenuPage($arrSubMenuItem);if($this->oProps->arrRootMenu['fCreateRoot'])remove_submenu_page($this->oProps->arrRootMenu['strPageSlug'],$this->oProps->arrRootMenu['strPageSlug']);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_SettingsAPI')):abstract class AmazonAutoLinks_AdminPageFramework_SettingsAPI extends AmazonAutoLinks_AdminPageFramework_Menu{ protected static $arrStructure_Section=array('strSectionID'=>null,'strPageSlug'=>null,'strTabSlug'=>null,'strTitle'=>null,'strDescription'=>null,'strCapability'=>null,'fIf'=>true,'numOrder'=>null,'strHelp'=>null,'strHelpAside'=>null,); protected static $arrStructure_Field=array('strFieldID'=>null,'strSectionID'=>null,'strSectionTitle'=>null,'strType'=>null,'strPageSlug'=>null,'strTabSlug'=>null,'strOptionKey'=>null,'strClassName'=>null,'strCapability'=>null,'strTitle'=>null,'strTip'=>null,'strDescription'=>null,'strName'=>null,'strError'=>null,'strBeforeField'=>null,'strAfterField'=>null,'fIf'=>true,'numOrder'=>null,'strHelp'=>null,'strHelpAside'=>null,'fRepeatable'=>null,); protected $arrFieldErrors; protected function setSettingNotice($strMsg,$strType='error',$strID=null,$fOverride=true){$arrWPSettingsErrors=isset($GLOBALS['wp_settings_errors'])?( array )$GLOBALS['wp_settings_errors']:array();$strID=isset($strID)?$strID:$this->oProps->strOptionKey;foreach($arrWPSettingsErrors as $intIndex=>$arrSettingsError){if($arrSettingsError['setting']!=$this->oProps->strOptionKey)continue;if($arrSettingsError['message']==$strMsg)return;if($arrSettingsError['code']===$strID){if(!$fOverride)return;else unset($arrWPSettingsErrors[$intIndex]);}}add_settings_error($this->oProps->strOptionKey,$strID,$strMsg,$strType);} protected function addSettingSections($arrSection1,$arrSection2=null,$_and_more=null){foreach(func_get_args() as $arrSection)$this->addSettingSection($arrSection);} protected function addSettingSection($arrSection){$strCurrentPageSlug=isset($_GET['page'])?$_GET['page']:null;if(!is_array($arrSection))return;$arrSection=$arrSection+self::$arrStructure_Section;$arrSection['strSectionID']=$this->oUtil->sanitizeSlug($arrSection['strSectionID']);$arrSection['strPageSlug']=$this->oUtil->sanitizeSlug($arrSection['strPageSlug']);$arrSection['strTabSlug']=$this->oUtil->sanitizeSlug($arrSection['strTabSlug']);if(!isset($arrSection['strSectionID'],$arrSection['strPageSlug']))return;if($GLOBALS['pagenow']!='options.php'&&!$strCurrentPageSlug||$strCurrentPageSlug!=$arrSection['strPageSlug'])return;if(!$arrSection['fIf'])return;$arrSection['strCapability']=isset($arrSection['strCapability'])?$arrSection['strCapability']:$this->oProps->strCapability;if(!current_user_can($arrSection['strCapability']))return;$this->oProps->arrSections[$arrSection['strSectionID']]=$arrSection;} protected function removeSettingSections($strSectionID1=null,$strSectionID2=null,$_and_more=null){foreach(func_get_args() as $strSectionID)if(isset($this->oProps->arrSections[$strSectionID]))unset($this->oProps->arrSections[$strSectionID]);} protected function addSettingFields($arrField1,$arrField2=null,$_and_more=null){foreach(func_get_args() as $arrField)$this->addSettingField($arrField);} protected function addSettingField($arrField){if(!is_array($arrField))return;$arrField=$arrField+self::$arrStructure_Field;$arrField['strFieldID']=$this->oUtil->sanitizeSlug($arrField['strFieldID']);$arrField['strSectionID']=$this->oUtil->sanitizeSlug($arrField['strSectionID']);if(!isset($arrField['strFieldID'],$arrField['strSectionID'],$arrField['strType']))return;if(!$arrField['fIf'])return;$arrField['strCapability']=isset($arrField['strCapability'])?$arrField['strCapability']:$this->oProps->strCapability;if(!current_user_can($arrField['strCapability']))return;$this->oProps->arrFields[$arrField['strFieldID']]=$arrField;} protected function removeSettingFields($strFieldID1,$strFieldID2=null,$_and_more){foreach(func_get_args() as $strFieldID)if(isset($this->oProps->arrFields[$strFieldID]))unset($this->oProps->arrFields[$strFieldID]);} protected function doPageLoadCall($strPageSlug,$strTabSlug,$arrArg){$this->oUtil->addAndDoActions($this,$this->oUtil->getFilterArrayByPrefix("load_",$this->oProps->strClassName,$strPageSlug,$strTabSlug,true));} protected function doValidationCall($strMethodName,$arrInput){$strTabSlug=isset($_POST['strTabSlug'])?$_POST['strTabSlug']:'';$strPageSlug=isset($_POST['strPageSlug'])?$_POST['strPageSlug']:'';$strPressedFieldID=isset($_POST['__submit'])?$this->getPressedCustomSubmitButtonSiblingValue($_POST['__submit'],'field_id'):'';$strPressedInputID=isset($_POST['__submit'])?$this->getPressedCustomSubmitButtonSiblingValue($_POST['__submit'],'input_id'):'';if(isset($_POST['__import']['submit'],$_FILES['__import']))return $this->importOptions($this->oProps->arrOptions,$strPageSlug,$strTabSlug);if(isset($_POST['__export']['submit']))die($this->exportOptions($this->oProps->arrOptions,$strPageSlug,$strTabSlug));if(isset($_POST['__reset_confirm'])&&$strPressedFieldName=$this->getPressedCustomSubmitButtonSiblingValue($_POST['__reset_confirm'],'key'))return $this->askResetOptions($strPressedFieldName,$strPageSlug);if(isset($_POST['__link'])&&$strLinkURL=$this->getPressedCustomSubmitButtonSiblingValue($_POST['__link'],'url'))$this->oUtil->goRedirect($strLinkURL);if(isset($_POST['__redirect'])&&$strRedirectURL=$this->getPressedCustomSubmitButtonSiblingValue($_POST['__redirect'],'url'))$this->setRedirectTransients($strRedirectURL);$arrInput=$this->getFilteredOptions($arrInput,$strPageSlug,$strTabSlug,$strPressedFieldID,$strPressedInputID);if(isset($_POST['__reset'])&&$strKeyToReset=$this->getPressedCustomSubmitButtonSiblingValue($_POST['__reset'],'key'))$arrInput=$this->resetOptions($strKeyToReset,$arrInput);$fEmpty=empty($arrInput);$this->setSettingNotice($fEmpty?$this->oMsg->___('option_cleared'):$this->oMsg->___('option_updated'),$fEmpty?'error':'updated',$this->oProps->strOptionKey,false);return $arrInput;} private function askResetOptions($strPressedFieldName,$strPageSlug){$arrNameKeys=explode('|',$strPressedFieldName);$strSectionID=$arrNameKeys[2];$strFieldID=$arrNameKeys[3];$arrErrors=array();$arrErrors[$strSectionID][$strFieldID]=$this->oMsg->___('reset_options');$this->setFieldErrors($arrErrors);set_transient(md5("reset_confirm_".$strPressedFieldName),$strPressedFieldName,60*2);$this->setSettingNotice($this->oMsg->___('confirm_perform_task'));return $this->getPageOptions($strPageSlug);} private function resetOptions($strKeyToReset,$arrInput){if($strKeyToReset==1 or $strKeyToReset===true){delete_option($this->oProps->strOptionKey);$this->setSettingNotice($this->oMsg->___('option_been_reset'));return array();}unset($this->oProps->arrOptions[trim($strKeyToReset)]);unset($arrInput[trim($strKeyToReset)]);update_option($this->oProps->strOptionKey,$this->oProps->arrOptions);$this->setSettingNotice($this->oMsg->___('specified_option_been_deleted'));return $arrInput;} private function setRedirectTransients($strURL){if(empty($strURL))return;$strTransient=md5(trim("redirect_{$this->oProps->strClassName}_{$_POST['strPageSlug']}"));return set_transient($strTransient,$strURL,60*2);} private function getPressedCustomSubmitButtonSiblingValue($arrPostElements,$strTargetKey='url'){foreach($arrPostElements as $strFieldName=>$arrSubElements){$arrNameKeys=explode('|',$arrSubElements['name']);if(count($arrNameKeys)==4&&isset($_POST[$arrNameKeys[0]][$arrNameKeys[1]][$arrNameKeys[2]][$arrNameKeys[3]]))return $arrSubElements[$strTargetKey];if(count($arrNameKeys)==5&&isset($_POST[$arrNameKeys[0]][$arrNameKeys[1]][$arrNameKeys[2]][$arrNameKeys[3]][$arrNameKeys[4]]))return $arrSubElements[$strTargetKey];}return null;} private function importOptions($arrStoredOptions,$strPageSlug,$strTabSlug){$oImport=new AmazonAutoLinks_AdminPageFramework_ImportOptions($_FILES['__import'],$_POST['__import']);$strPressedFieldID=$oImport->getSiblingValue('field_id');$strPressedInputID=$oImport->getSiblingValue('input_id');$fMerge=$oImport->getSiblingValue('do_merge');if($oImport->getError()>0){$this->setSettingNotice($this->oMsg->___('import_error'));return $arrStoredOptions;}if(!in_array($oImport->getType(),array('text/plain','application/octet-stream'))){$this->setSettingNotice($this->oMsg->___('uploaded_file_type_not_supported'));return $arrStoredOptions;}$vData=$oImport->getImportData();if($vData===false){$this->setSettingNotice($this->oMsg->___('could_not_load_importing_data'));return $arrStoredOptions;}$strFormatType=$this->oUtil->addAndApplyFilters($this,array("import_format_{$strPageSlug}_{$strTabSlug}","import_format_{$strPageSlug}","import_format_{$this->oProps->strClassName}_{$strPressedInputID}","import_format_{$this->oProps->strClassName}_{$strPressedFieldID}","import_format_{$this->oProps->strClassName}"),$oImport->getFormatType(),$strPressedFieldID,$strPressedInputID);$oImport->formatImportData($vData,$strFormatType);$strImportOptionKey=$this->oUtil->addAndApplyFilters($this,array("import_option_key_{$strPageSlug}_{$strTabSlug}","import_option_key_{$strPageSlug}","import_option_key_{$this->oProps->strClassName}_{$strPressedInputID}","import_option_key_{$this->oProps->strClassName}_{$strPressedFieldID}","import_option_key_{$this->oProps->strClassName}"),$oImport->getSiblingValue('import_option_key'),$strPressedFieldID,$strPressedInputID);$vData=$this->oUtil->addAndApplyFilters($this,array("import_{$strPageSlug}_{$strTabSlug}","import_{$strPageSlug}","import_{$this->oProps->strClassName}_{$strPressedInputID}","import_{$this->oProps->strClassName}_{$strPressedFieldID}","import_{$this->oProps->strClassName}"),$vData,$arrStoredOptions,$strPressedFieldID,$strPressedInputID,$strFormatType,$strImportOptionKey,$fMerge);$fEmpty=empty($vData);$this->setSettingNotice($fEmpty?$this->oMsg->___('not_imported_data'):$this->oMsg->___('imported_data'),$fEmpty?'error':'updated',$this->oProps->strOptionKey,false);if($strImportOptionKey!=$this->oProps->strOptionKey){update_option($strImportOptionKey,$vData);return $arrStoredOptions;}return $fMerge?$this->oUtil->unitArrays($vData,$arrStoredOptions):$vData;} private function exportOptions($vData,$strPageSlug,$strTabSlug){$oExport=new AmazonAutoLinks_AdminPageFramework_ExportOptions($_POST['__export'],$this->oProps->strClassName);$strPressedFieldID=$oExport->getSiblingValue('field_id');$strPressedInputID=$oExport->getSiblingValue('input_id');$vData=$oExport->getTransientIfSet($vData);$strFieldID=$oExport->getFieldID();$vData=$this->oUtil->addAndApplyFilters($this,array("export_{$strPageSlug}_{$strTabSlug}","export_{$strPageSlug}","export_{$this->oProps->strClassName}_{$strPressedInputID}","export_{$this->oProps->strClassName}_{$strPressedFieldID}","export_{$this->oProps->strClassName}"),$vData,$strPressedFieldID,$strPressedInputID);$strFileName=$this->oUtil->addAndApplyFilters($this,array("export_name_{$strPageSlug}_{$strTabSlug}","export_name_{$strPageSlug}","export_name_{$this->oProps->strClassName}_{$strPressedInputID}","export_name_{$this->oProps->strClassName}_{$strPressedFieldID}","export_name_{$this->oProps->strClassName}"),$oExport->getFileName(),$strPressedFieldID,$strPressedInputID);$strFormatType=$this->oUtil->addAndApplyFilters($this,array("export_format_{$strPageSlug}_{$strTabSlug}","export_format_{$strPageSlug}","export_format_{$this->oProps->strClassName}_{$strPressedInputID}","export_format_{$this->oProps->strClassName}_{$strPressedFieldID}","export_format_{$this->oProps->strClassName}"),$oExport->getFormat(),$strPressedFieldID,$strPressedInputID);$oExport->doExport($vData,$strFileName,$strFormatType);exit;} private function getFilteredOptions($arrInput,$strPageSlug,$strTabSlug,$strPressedFieldID,$strPressedInputID){$arrStoredPageOptions=$this->getPageOptions($strPageSlug);if($strTabSlug&&$strPageSlug){$arrRegisteredSectionKeysForThisTab=isset($arrInput[$strPageSlug])?array_keys($arrInput[$strPageSlug]):array();$arrInput=$this->oUtil->addAndApplyFilter($this,"validation_{$strPageSlug}_{$strTabSlug}",$arrInput,$arrStoredPageOptions);$arrInput=$this->oUtil->uniteArraysRecursive($arrInput,$this->getOtherTabOptions($strPageSlug,$arrRegisteredSectionKeysForThisTab));}if($strPageSlug){$arrInput=$this->oUtil->addAndApplyFilter($this,"validation_{$strPageSlug}",$arrInput,$arrStoredPageOptions);$arrInput=$this->oUtil->uniteArraysRecursive($arrInput,$this->getOtherPageOptions($strPageSlug));}if($strPressedInputID)$arrInput=$this->oUtil->addAndApplyFilter($this,"validation_{$this->oProps->strClassName}_{$strPressedInputID}",$arrInput,$this->oProps->arrOptions);if($strPressedFieldID)$arrInput=$this->oUtil->addAndApplyFilter($this,"validation_{$this->oProps->strClassName}_{$strPressedFieldID}",$arrInput,$this->oProps->arrOptions);$arrInput=$this->oUtil->addAndApplyFilter($this,"validation_{$this->oProps->strClassName}",$arrInput,$this->oProps->arrOptions);return $arrInput;} private function getPageOptions($strPageSlug){$arrStoredPageOptions=array();if(isset($this->oProps->arrOptions[$strPageSlug]))$arrStoredPageOptions[$strPageSlug]=$this->oProps->arrOptions[$strPageSlug];return $arrStoredPageOptions;} private function getOtherTabOptions($strPageSlug,$arrSectionKeysForTheTab){$arrOtherTabOptions=array();if(isset($this->oProps->arrOptions[$strPageSlug]))$arrOtherTabOptions[$strPageSlug]=$this->oProps->arrOptions[$strPageSlug];foreach($arrSectionKeysForTheTab as $arrSectionKey)unset($arrOtherTabOptions[$strPageSlug][$arrSectionKey]);return $arrOtherTabOptions;} private function getOtherPageOptions($strPageSlug){$arrOtherPageOptions=$this->oProps->arrOptions;if(isset($arrOtherPageOptions[$strPageSlug]))unset($arrOtherPageOptions[$strPageSlug]);return $arrOtherPageOptions;} protected function renderSettingField($strFieldID,$strPageSlug){if(!isset($this->oProps->arrFields[$strFieldID]))return;$arrField=$this->oProps->arrFields[$strFieldID];$this->arrFieldErrors=isset($this->arrFieldErrors)?$this->arrFieldErrors:$this->getFieldErrors($strPageSlug);$strFieldType=isset($this->oProps->arrFieldTypeDefinitions[$arrField['strType']]['callRenderField'])&&is_callable($this->oProps->arrFieldTypeDefinitions[$arrField['strType']]['callRenderField'])?$arrField['strType']:'default';$oField=new AmazonAutoLinks_AdminPageFramework_InputField($arrField,$this->oProps->arrOptions,$this->arrFieldErrors,$this->oProps->arrFieldTypeDefinitions[$strFieldType],$this->oMsg);$strFieldOutput=$oField->getInputField($strFieldType);unset($oField);echo $this->oUtil->addAndApplyFilters($this,array($this->oProps->strClassName.'_'.self::$arrPrefixesForCallbacks['field_'].$strFieldID,self::$arrPrefixesForCallbacks['field_'].$this->oProps->strClassName.'_'.$strFieldID),$strFieldOutput,$arrField);} protected function getFieldErrors($strPageSlug,$fDelete=true){if(!isset($_GET['settings-updated']))return null;$strTransient=md5($this->oProps->strClassName.'_'.$strPageSlug);$arrFieldErrors=get_transient($strTransient);if($fDelete)delete_transient($strTransient);return $arrFieldErrors;} protected function setFieldErrors($arrErrors,$strID=null,$numSavingDuration=300){$strID=isset($strID)?$strID:(isset($_POST['strPageSlug'])?$_POST['strPageSlug']:(isset($_GET['page'])?$_GET['page']:$this->oProps->strClassName));set_transient(md5($this->oProps->strClassName.'_'.$strID),$arrErrors,$numSavingDuration);} protected function renderSectionDescription($strMethodName){$strSectionID=substr($strMethodName,strlen('section_pre_'));if(!isset($this->oProps->arrSections[$strSectionID]))return;echo $this->oUtil->addAndApplyFilters($this,array($this->oProps->strClassName.'_'.self::$arrPrefixesForCallbacks['section_'].$strSectionID,self::$arrPrefixesForCallbacks['section_'].$this->oProps->strClassName.'_'.$strSectionID),'<p>'.$this->oProps->arrSections[$strSectionID]['strDescription'].'</p>',$this->oProps->arrSections[$strSectionID]['strDescription']);} private function getPageSlugBySectionID($strSectionID){return isset($this->oProps->arrSections[$strSectionID]['strPageSlug'])?$this->oProps->arrSections[$strSectionID]['strPageSlug']:null;} public function registerSettings(){$this->oProps->arrSections=$this->formatSectionArrays($this->oProps->arrSections);$this->oProps->arrFields=$this->formatFieldArrays($this->oProps->arrFields);if($GLOBALS['pagenow']!='options.php'&&(count($this->oProps->arrSections)==0||count($this->oProps->arrFields)==0))return;new AmazonAutoLinks_AdminPageFramework_BuiltinInputFieldTypeDefinitions($this->oProps->arrFieldTypeDefinitions,$this->oProps->strClassName,$this->oMsg);$this->oProps->arrFieldTypeDefinitions=$this->oUtil->addAndApplyFilter($this,self::$arrPrefixesForCallbacks['field_types_'].$this->oProps->strClassName,$this->oProps->arrFieldTypeDefinitions);uasort($this->oProps->arrSections,array($this->oProps,'sortByOrder'));foreach($this->oProps->arrSections as $arrSection){add_settings_section($arrSection['strSectionID'],"<a id='{$arrSection['strSectionID']}'></a>".$arrSection['strTitle'],array($this,'section_pre_'.$arrSection['strSectionID']),$arrSection['strPageSlug']);if(!empty($arrSection['strHelp']))$this->addHelpTab(array('strPageSlug'=>$arrSection['strPageSlug'],'strPageTabSlug'=>$arrSection['strTabSlug'],'strHelpTabTitle'=>$arrSection['strTitle'],'strHelpTabID'=>$arrSection['strSectionID'],'strHelpTabContent'=>$arrSection['strHelp'],'strHelpTabSidebarContent'=>$arrSection['strHelpAside']?$arrSection['strHelpAside']:"",));}$strCurrentPageSlug=isset($_GET['page'])?$_GET['page']:null;uasort($this->oProps->arrFields,array($this->oProps,'sortByOrder'));foreach($this->oProps->arrFields as $arrField){add_settings_field($arrField['strFieldID'],"<a id='{$arrField['strFieldID']}'></a><span title='{$arrField['strTip']}'>{$arrField['strTitle']}</span>",array($this,'field_pre_'.$arrField['strFieldID']),$this->getPageSlugBySectionID($arrField['strSectionID']),$arrField['strSectionID'],$arrField['strFieldID']);$this->setFieldHeadTagElements($arrField);if(!empty($arrField['strHelp']))$this->addHelpTab(array('strPageSlug'=>$arrField['strPageSlug'],'strPageTabSlug'=>$arrField['strTabSlug'],'strHelpTabTitle'=>$arrField['strSectionTitle'],'strHelpTabID'=>$arrField['strSectionID'],'strHelpTabContent'=>"<span class='contextual-help-tab-title'>".$arrField['strTitle']."</span> - ".PHP_EOL.$arrField['strHelp'],'strHelpTabSidebarContent'=>$arrField['strHelpAside']?$arrField['strHelpAside']:"",));}$this->oProps->fEnableForm=true;register_setting($this->oProps->strOptionKey,$this->oProps->strOptionKey,array($this,'validation_pre_'.$this->oProps->strClassName));} private function setFieldHeadTagElements($arrField){$strFieldType=$arrField['strType'];if(isset($GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'][$strFieldType])&&$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'][$strFieldType])return;$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'][$strFieldType]=true;if(!isset($this->oProps->arrFieldTypeDefinitions[$strFieldType]))return;if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callFieldLoader']))call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callFieldLoader'],array());if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetScripts']))$this->oProps->strScript.=call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetScripts'],array());if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetStyles']))$this->oProps->strStyle.=call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetStyles'],array());if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetIEStyles']))$this->oProps->strStyleIE.=call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetIEStyles'],array());$this->oHeadTag->enqueueStyles($this->oProps->arrFieldTypeDefinitions[$strFieldType]['arrEnqueueStyles']);$this->oHeadTag->enqueueScripts($this->oProps->arrFieldTypeDefinitions[$strFieldType]['arrEnqueueScripts']);} private function formatSectionArrays($arrSections){$arrSections=$this->oUtil->addAndApplyFilter($this,"{$this->oProps->strClassName}_setting_sections",$arrSections);$strCurrentPageSlug=isset($_GET['page'])?$_GET['page']:null;$arrNewSectionArray=array();foreach($arrSections as $arrSection){$arrSection=$arrSection+self::$arrStructure_Section;$arrSection['strSectionID']=$this->oUtil->sanitizeSlug($arrSection['strSectionID']);$arrSection['strPageSlug']=$this->oUtil->sanitizeSlug($arrSection['strPageSlug']);$arrSection['strTabSlug']=$this->oUtil->sanitizeSlug($arrSection['strTabSlug']);if(!isset($arrSection['strSectionID'],$arrSection['strPageSlug']))continue;if($GLOBALS['pagenow']!='options.php'&&!$strCurrentPageSlug||$strCurrentPageSlug!=$arrSection['strPageSlug'])continue;if(!$this->isSettingSectionOfCurrentTab($arrSection))continue;$arrSection['strCapability']=isset($arrSection['strCapability'])?$arrSection['strCapability']:$this->oProps->strCapability;if(!current_user_can($arrSection['strCapability']))continue;if($arrSection['fIf']!==true)continue;$arrSection['numOrder']=is_numeric($arrSection['numOrder'])?$arrSection['numOrder']:count($arrNewSectionArray)+10;$arrNewSectionArray[$arrSection['strSectionID']]=$arrSection;}return $arrNewSectionArray;} private function isSettingSectionOfCurrentTab($arrSection){if(!isset($arrSection['strTabSlug']))return true;$strCurrentTab=isset($_GET['tab'])?$_GET['tab']:null;if($arrSection['strTabSlug']==$strCurrentTab)return true;$strPageSlug=$arrSection['strPageSlug'];if(!isset($_GET['tab'])&&isset($this->oProps->arrInPageTabs[$strPageSlug])){$strDefaultTabSlug=isset($this->oProps->arrDefaultInPageTabs[$strPageSlug])?$this->oProps->arrDefaultInPageTabs[$strPageSlug]:'';if($strDefaultTabSlug==$arrSection['strTabSlug'])return true;}return false;} private function formatFieldArrays($arrFields){$arrFields=$this->oUtil->addAndApplyFilter($this,"{$this->oProps->strClassName}_setting_fields",$arrFields);$arrNewFieldArrays=array();foreach($arrFields as $arrField){if(!is_array($arrField))continue;$arrField=$arrField+self::$arrStructure_Field;$arrField['strFieldID']=$this->oUtil->sanitizeSlug($arrField['strFieldID']);$arrField['strSectionID']=$this->oUtil->sanitizeSlug($arrField['strSectionID']);if(!isset($this->oProps->arrSections[$arrField['strSectionID']]))continue;if(!isset($arrField['strFieldID'],$arrField['strSectionID'],$arrField['strType']))continue;$arrField['strCapability']=isset($arrField['strCapability'])?$arrField['strCapability']:$this->oProps->strCapability;if(!current_user_can($arrField['strCapability']))continue;if($arrField['fIf']!==true)continue;$arrField['numOrder']=is_numeric($arrField['numOrder'])?$arrField['numOrder']:count($arrNewFieldArrays)+10;$arrField['strTip']=strip_tags(isset($arrField['strTip'])?$arrField['strTip']:$arrField['strDescription']);$arrField['strOptionKey']=$this->oProps->strOptionKey;$arrField['strClassName']=$this->oProps->strClassName;$arrField['strPageSlug']=$this->oProps->arrSections[$arrField['strSectionID']]['strPageSlug'];$arrField['strTabSlug']=$this->oProps->arrSections[$arrField['strSectionID']]['strTabSlug'];$arrField['strSectionTitle']=$this->oProps->arrSections[$arrField['strSectionID']]['strTitle'];$arrNewFieldArrays[$arrField['strFieldID']]=$arrField;}return $arrNewFieldArrays;} protected function getFieldValue($strFieldNameToFind){foreach($this->oProps->arrOptions as $strPageSlug=>$arrSections)foreach($arrSections as $strSectionName=>$arrFields)foreach($arrFields as $strFieldName=>$vValue)if(trim($strFieldNameToFind)==trim($strFieldName))return $vValue;return null;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework')):abstract class AmazonAutoLinks_AdminPageFramework extends AmazonAutoLinks_AdminPageFramework_SettingsAPI{ protected $oProps; protected $oDebug; protected $oMsg; protected $oLink; protected $oUtil; protected $oHeadTag; public function __construct($strOptionKey=null,$strCallerPath=null,$strCapability=null,$strTextDomain='admin-page-framework'){$strClassName=get_class($this);$this->oProps=new AmazonAutoLinks_AdminPageFramework_Properties($this,$strClassName,$strOptionKey,$strCapability);$this->oMsg=AmazonAutoLinks_AdminPageFramework_Messages::instantiate($strTextDomain);$this->oUtil=new AmazonAutoLinks_AdminPageFramework_Utilities;$this->oDebug=new AmazonAutoLinks_AdminPageFramework_Debug;$this->oLink=new AmazonAutoLinks_AdminPageFramework_Link($this->oProps,$strCallerPath,$this->oMsg);$this->oHeadTag=new AmazonAutoLinks_AdminPageFramework_HeadTag_Pages($this->oProps);if(is_admin()){add_action('wp_loaded',array($this,'setUp'));add_action('admin_menu',array($this,'buildMenus'),98);add_action('admin_menu',array($this,'finalizeInPageTabs'),99);add_action('admin_menu',array($this,'registerSettings'),100);add_action('admin_init',array($this,'checkRedirects'));add_action("admin_head",array($this,'registerHelpTabs'),200);add_filter("option_page_capability_{$this->oProps->strOptionKey}",array($this->oProps,'getCapability'));$this->oUtil->addAndDoAction($this,self::$arrPrefixes['start_'].$this->oProps->strClassName);}} public function __call($strMethodName,$arrArgs=null){$strPageSlug=isset($_GET['page'])?$_GET['page']:null;$strTabSlug=isset($_GET['tab'])?$_GET['tab']:$this->oProps->getDefaultInPageTab($strPageSlug);if(substr($strMethodName,0,strlen('section_pre_'))=='section_pre_')return $this->renderSectionDescription($strMethodName);if(substr($strMethodName,0,strlen('field_pre_'))=='field_pre_')return $this->renderSettingField($arrArgs[0],$strPageSlug);if(substr($strMethodName,0,strlen('validation_pre_'))=='validation_pre_')return $this->doValidationCall($strMethodName,$arrArgs[0]);if(substr($strMethodName,0,strlen('load_pre_'))=='load_pre_')return $this->doPageLoadCall(substr($strMethodName,strlen('load_pre_')),$strTabSlug,$arrArgs[0]);if($strMethodName==$this->oProps->strClassHash.'_page_'.$strPageSlug)return $this->renderPage($strPageSlug,$strTabSlug);if($this->isFrameworkCallbackMethod($strMethodName))return isset($arrArgs[0])?$arrArgs[0]:null;} private function isFrameworkCallbackMethod($strMethodName){if(substr($strMethodName,0,strlen("{$this->oProps->strClassName}_"))=="{$this->oProps->strClassName}_")return true;if(substr($strMethodName,0,strlen("validation_{$this->oProps->strClassName}_"))=="validation_{$this->oProps->strClassName}_")return true;if(substr($strMethodName,0,strlen("field_types_{$this->oProps->strClassName}"))=="field_types_{$this->oProps->strClassName}")return true;foreach(self::$arrPrefixes as $strPrefix){if(substr($strMethodName,0,strlen($strPrefix))==$strPrefix)return true;}return false;} public function setUp(){} protected function addSubMenuItems($arrSubMenuItem1,$arrSubMenuItem2=null,$_and_more=null){foreach(func_get_args() as $arrSubMenuItem)$this->addSubMenuItem($arrSubMenuItem);} private function addSubMenuItem($arrSubMenuItem){if(isset($arrSubMenuItem['strURL'])){$arrSubMenuLink=$arrSubMenuItem+AmazonAutoLinks_AdminPageFramework_Link::$arrStructure_SubMenuLink;$this->oLink->addSubMenuLink($arrSubMenuLink['strMenuTitle'],$arrSubMenuLink['strURL'],$arrSubMenuLink['strCapability'],$arrSubMenuLink['numOrder'],$arrSubMenuLink['fShowPageHeadingTab'],$arrSubMenuLink['fShowInMenu']);}else {$arrSubMenuPage=$arrSubMenuItem+self::$arrStructure_SubMenuPage;$this->addSubMenuPage($arrSubMenuPage['strPageTitle'],$arrSubMenuPage['strPageSlug'],$arrSubMenuPage['strScreenIcon'],$arrSubMenuPage['strCapability'],$arrSubMenuPage['numOrder'],$arrSubMenuPage['fShowPageHeadingTab'],$arrSubMenuPage['fShowInMenu']);}} protected function addSubMenuLink($strMenuTitle,$strURL,$strCapability=null,$numOrder=null,$fShowPageHeadingTab=true,$fShowInMenu=true){$this->oLink->addSubMenuLink($strMenuTitle,$strURL,$strCapability,$numOrder,$fShowPageHeadingTab,$fShowInMenu);} protected function addLinkToPluginDescription($strTaggedLinkHTML1,$strTaggedLinkHTML2=null,$_and_more=null){$this->oLink->addLinkToPluginDescription(func_get_args());} protected function addLinkToPluginTitle($strTaggedLinkHTML1,$strTaggedLinkHTML2=null,$_and_more=null){$this->oLink->addLinkToPluginTitle(func_get_args());} protected function setCapability($strCapability){$this->oProps->strCapability=$strCapability;} protected function setFooterInfoLeft($strHTML,$fAppend=true){$this->oProps->arrFooterInfo['strLeft']=$fAppend?$this->oProps->arrFooterInfo['strLeft'].$strHTML:$strHTML;} protected function setFooterInfoRight($strHTML,$fAppend=true){$this->oProps->arrFooterInfo['strRight']=$fAppend?$this->oProps->arrFooterInfo['strRight'].$strHTML:$strHTML;} public function checkRedirects(){if(!(isset($_GET['page']))||!$this->oProps->isPageAdded($_GET['page']))return;if(!(isset($_GET['settings-updated'])&&!empty($_GET['settings-updated'])))return;$arrError=$this->getFieldErrors($_GET['page'],false);if(!empty($arrError))return;$strTransient=md5(trim("redirect_{$this->oProps->strClassName}_{$_GET['page']}"));$strURL=get_transient($strTransient);if($strURL===false)return;delete_transient($strTransient);$this->oUtil->goRedirect($strURL);} public function enqueueStyle($strSRC,$strPageSlug='',$strTabSlug='',$arrCustomArgs=array()){return $this->oHeadTag->enqueueStyle($strSRC,$strPageSlug,$strTabSlug,$arrCustomArgs);} public function enqueueScript($strSRC,$strPageSlug='',$strTabSlug='',$arrCustomArgs=array()){return $this->oHeadTag->enqueueScript($strSRC,$strPageSlug,$strTabSlug,$arrCustomArgs);} protected function setAdminNotice($strMessage,$strClassSelector='error',$strID=''){$strID=$strID?$strID:md5($strMessage);$this->oProps->arrAdminNotices[md5($strMessage)]=array('strMessage'=>$strMessage,'strClassSelector'=>$strClassSelector,'strID'=>$strID,);add_action('admin_notices',array($this,'printAdminNotices'));} public function printAdminNotices(){foreach($this->oProps->arrAdminNotices as $arrAdminNotice)echo "<div class='{$arrAdminNotice['strClassSelector']}' id='{$arrAdminNotice['strID']}' ><p>".$arrAdminNotice['strMessage']."</p></div>";} public function setDisallowedQueryKeys($arrQueryKeys,$fAppend=true){if(!$fAppend){$this->oProps->arrDisallowedQueryKeys=$arrQueryKeys;return;}$arrNewQueryKeys=array_merge($arrQueryKeys,$this->oProps->arrDisallowedQueryKeys);$arrNewQueryKeys=array_filter($arrNewQueryKeys);$arrNewQueryKeys=array_unique($arrNewQueryKeys);$this->oProps->arrDisallowedQueryKeys=$arrNewQueryKeys;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Messages')):class AmazonAutoLinks_AdminPageFramework_Messages{ public $arrMessages=array(); private static $oInstance; public static function instantiate($strTextDomain='admin-page-framework'){if(!isset(self::$oInstance)&&!(self::$oInstance instanceof AmazonAutoLinks_AdminPageFramework_Messages))self::$oInstance=new AmazonAutoLinks_AdminPageFramework_Messages($strTextDomain);return self::$oInstance;} public function __construct($strTextDomain='admin-page-framework'){$this->strTextDomain=$strTextDomain;$this->arrMessages=array('option_updated'=>__('The options have been updated.','admin-page-framework'),'option_cleared'=>__('The options have been cleared.','admin-page-framework'),'export_options'=>__('Export Options','admin-page-framework'),'import_options'=>__('Import Options','admin-page-framework'),'submit'=>__('Submit','admin-page-framework'),'import_error'=>__('An error occurred while uploading the import file.','admin-page-framework'),'uploaded_file_type_not_supported'=>__('The uploaded file type is not supported.','admin-page-framework'),'could_not_load_importing_data'=>__('Could not load the importing data.','admin-page-framework'),'imported_data'=>__('The uploaded file has been imported.','admin-page-framework'),'not_imported_data'=>__('No data could be imported.','admin-page-framework'),'add'=>__('Add','admin-page-framework'),'remove'=>__('Remove','admin-page-framework'),'upload_image'=>__('Upload Image','admin-page-framework'),'use_this_image'=>__('Use This Image','admin-page-framework'),'reset_options'=>__('Are you sure you want to reset the options?','admin-page-framework'),'confirm_perform_task'=>__('Please confirm if you want to perform the specified task.','admin-page-framework'),'option_been_reset'=>__('The options have been reset.','admin-page-framework'),'specified_option_been_deleted'=>__('The specified options have been deleted.','admin-page-framework'),'title'=>__('Title','admin-page-framework'),'author'=>__('Author','admin-page-framework'),'categories'=>__('Categories','admin-page-framework'),'tags'=>__('Tags','admin-page-framework'),'comments'=>__('Comments','admin-page-framework'),'date'=>__('Date','admin-page-framework'),'show_all'=>__('Show All','admin-page-framework'),'powered_by'=>__('Powered by','admin-page-framework'),'settings'=>__('Settings','admin-page-framework'),'manage'=>__('Manage','admin-page-framework'),'select_image'=>__('Select Image','admin-page-framework'),'upload_file'=>__('Upload File','admin-page-framework'),'use_this_file'=>__('Use This File','admin-page-framework'),'select_file'=>__('Select File','admin-page-framework'),);} public function ___($strKey){return isset($this->arrMessages[$strKey])?__($this->arrMessages[$strKey],$this->strTextDomain):'';} public function __e($strKey){if(isset($this->arrMessages[$strKey]))_e($this->arrMessages[$strKey],$this->strTextDomain);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Properties_Base')):abstract class AmazonAutoLinks_AdminPageFramework_Properties_Base{ protected $oCaller; public $strScript=''; public $strStyle=''; public $strStyleIE=''; public $arrFieldTypeDefinitions=array(); public static $strDefaultStyle=".wrap div.updated, 
		.wrap div.settings-error { 
			clear: both; 
			margin-top: 16px;
		} 		

		.contextual-help-description {
			clear: left;	
			display: block;
			margin: 1em 0;
		}
		.contextual-help-tab-title {
			font-weight: bold;
		}
		
		/* Delimiter */
		.admin-page-framework-fields .delimiter {
			display: inline;
		}
		/* Description */
		.admin-page-framework-fields .admin-page-framework-fields-description {
			/* margin-top: 0px; */
			/* margin-bottom: 0.5em; */
			margin-bottom: 0;
		}
		/* Input form elements */
		.admin-page-framework-field {
			display: inline;
			margin-top: 1px;
			margin-bottom: 1px;
		}
		.admin-page-framework-field .admin-page-framework-input-label-container {
			margin-bottom: 0.25em;
		}
		@media only screen and ( max-width: 780px ) {	/* For WordPress v3.8 or greater */
			.admin-page-framework-field .admin-page-framework-input-label-container {
				margin-bottom: 0.5em;
			}
		}			
		.admin-page-framework-field input[type='radio'],
		.admin-page-framework-field input[type='checkbox']
		{
			margin-right: 0.5em;
		}		
		
		.admin-page-framework-field .admin-page-framework-input-label-string {
			padding-right: 1em;	/* for checkbox label strings, a right padding is needed */
		}
		.admin-page-framework-field .admin-page-framework-input-button-container {
			padding-right: 1em; 
		}
		.admin-page-framework-field-radio .admin-page-framework-input-label-container,
		.admin-page-framework-field-select .admin-page-framework-input-label-container,
		.admin-page-framework-field-checkbox .admin-page-framework-input-label-container 
		{
			padding-right: 1em;
		}

		.admin-page-framework-field .admin-page-framework-input-container {
			display: inline-block;
			vertical-align: middle; 
		}
		.admin-page-framework-field-text .admin-page-framework-field .admin-page-framework-input-label-container,
		.admin-page-framework-field-textarea .admin-page-framework-field .admin-page-framework-input-label-container,
		.admin-page-framework-field-color .admin-page-framework-field .admin-page-framework-input-label-container,
		.admin-page-framework-field-select .admin-page-framework-field .admin-page-framework-input-label-container
		{
			vertical-align: top; 
		}
		.admin-page-framework-field-image .admin-page-framework-field .admin-page-framework-input-label-container {			
			vertical-align: middle;
		}
		.admin-page-framework-field .admin-page-framework-input-label-container,
		.admin-page-framework-field .admin-page-framework-input-label-string
		{
			display: inline-block;		
			vertical-align: middle;
		}
		.admin-page-framework-field-textarea .admin-page-framework-input-label-string {
			vertical-align: top;
			margin-top: 2px;
		}
		
		.admin-page-framework-field-posttype .admin-page-framework-field input[type='checkbox'] { 
			margin-top: 0px;
		}
		.admin-page-framework-field-posttype .admin-page-framework-field {
			display: inline-block;
		}
		.admin-page-framework-field-radio .admin-page-framework-field .admin-page-framework-input-container {
			display: inline;
		}
		
		/* Repeatable Fields */		
		.admin-page-framework-field.repeatable {
			clear: both;
			display: block;
		}
		.admin-page-framework-repeatable-field-buttons {
			float: right;
			margin-bottom: 0.5em;
		}
		.admin-page-framework-repeatable-field-buttons .repeatable-field-button {
			margin: 0 2px;
			font-weight: normal;
			vertical-align: middle;
			text-align: center;
		}

		/* Import Field */
		.admin-page-framework-field-import input {
			margin-right: 0.5em;
		}
		"; public static $strDefaultStyleIE=''; public static $arrStructure_EnqueuingScriptsAndStyles=array('strURL'=>null,'arrPostTypes'=>array(),'strPageSlug'=>null,'strTabSlug'=>null,'strType'=>null,'strHandleID'=>null,'arrDependencies'=>array(),'strVersion'=>false,'arrTranslation'=>array(),'fInFooter'=>false,'strMedia'=>'all',); public $arrEnqueuingScripts=array(); public $arrEnqueuingStyles=array(); public $intEnqueuedScriptIndex=0; public $intEnqueuedStyleIndex=0;function __construct($oCaller){$this->oCaller=$oCaller;$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']=isset($GLOBALS['arrAmazonAutoLinks_AdminPageFramework'])&&is_array($GLOBALS['arrAmazonAutoLinks_AdminPageFramework'])?$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']:array();} public function sortByOrder($a,$b){return $a['numOrder']-$b['numOrder'];} public function getParentObject(){return $this->oCaller;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_MetaBox_Properties')):class AmazonAutoLinks_AdminPageFramework_MetaBox_Properties extends AmazonAutoLinks_AdminPageFramework_Properties_Base{ public $strMetaBoxID=''; public $strTitle=''; public $arrPostTypes=array(); public $strContext='normal'; public $strPriority='default'; public $strClassName=''; public $strCapability='edit_posts'; public $strPrefixStart='start_'; public $arrFields=array(); public $arrOptions=array(); public $strThickBoxTitle=''; public $strThickBoxButtonUseThis=''; public $arrHelpTabText=array(); public $arrHelpTabTextSide=array(); public static $arrStructure_Field=array('strFieldID'=>null,'strType'=>null,'strTitle'=>null,'strDescription'=>null,'strCapability'=>null,'strTip'=>null,'vValue'=>null,'vDefault'=>null,'strName'=>null,'vLabel'=>'','fIf'=>true,'strHelp'=>null,'strHelpAside'=>null,'fHideTitleColumn'=>null,'fRepeatable'=>null,);}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_PostType_Properties')):class AmazonAutoLinks_AdminPageFramework_PostType_Properties extends AmazonAutoLinks_AdminPageFramework_Properties_Base{ public $strPostType=''; public $arrPostTypeArgs=array(); public $strClassName=''; public $arrColumnHeaders=array('cb'=>'<input type="checkbox" />','title'=>'Title','author'=>'Author','comments'=>'<div class="comment-grey-bubble"></div>','date'=>'Date',); public $arrColumnSortable=array('title'=>true,'date'=>true,); public $strCallerPath=''; public $strPrefix_Start='start_'; public $strPrefix_Cell='cell_'; public $arrTaxonomies; public $arrTaxonomyTableFilters=array(); public $arrTaxonomyRemoveSubmenuPages=array(); public $fEnableAutoSave=true; public $fEnableAuthorTableFileter=false;}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Properties')):class AmazonAutoLinks_AdminPageFramework_Properties extends AmazonAutoLinks_AdminPageFramework_Properties_Base{ public $strClassName; public $strClassHash; public $strCapability='manage_options'; public $strPageHeadingTabTag='h2'; public $strInPageTabTag='h3'; public $strDefaultPageSlug; public $arrPages=array(); public $arrHiddenPages=array(); public $arrRegisteredSubMenuPages=array(); public $arrRootMenu=array('strTitle'=>null,'strPageSlug'=>null,'strURLIcon16x16'=>null,'intPosition'=>null,'fCreateRoot'=>null,); public $arrInPageTabs=array(); public $arrDefaultInPageTabs=array(); public $arrPluginDescriptionLinks=array(); public $arrPluginTitleLinks=array(); public $arrFooterInfo=array('strLeft'=>'','strRight'=>'',); public $strOptionKey=''; public $arrSections=array(); public $arrFields=array(); public $arrHelpTabs=array(); public $strFormEncType='multipart/form-data'; public $strThickBoxButtonUseThis=''; public $fEnableForm=false; public $fShowPageTitle=true; public $fShowPageHeadingTabs=true; public $fShowInPageTabs=true; public $arrAdminNotices=array(); public $arrDisallowedQueryKeys=array('settings-updated'); public function __construct($oCaller,$strClassName,$strOptionKey,$strCapability='manage_options'){parent::__construct($oCaller);$this->strClassName=$strClassName;$this->strClassHash=md5($strClassName);$this->strOptionKey=$strOptionKey?$strOptionKey:$strClassName;$this->strCapability=empty($strCapability)?$this->strCapability:$strCapability;} public function &__get($strName){if($strName=='arrOptions'){$this->arrOptions=$this->getOptions();return $this->arrOptions;}return null;} public function isPageAdded($strPageSlug=''){$strPageSlug=!empty($strPageSlug)?$strPageSlug:(isset($_GET['page'])?$_GET['page']:'');return (array_key_exists(trim($strPageSlug),$this->arrPages))?true:false;} public function getDefaultInPageTab($strPageSlug){if(!$strPageSlug)return '';return isset($this->arrDefaultInPageTabs[$strPageSlug])?$this->arrDefaultInPageTabs[$strPageSlug]:'';} public function getOptions(){$vOptions=get_option($this->strOptionKey);if(empty($vOptions))return array();if(is_array($vOptions))return $vOptions;return ( array )$vOptions;} public function getCapability(){return $this->strCapability;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_CustomSubmitFields')):abstract class AmazonAutoLinks_AdminPageFramework_CustomSubmitFields{ public function __construct($arrPostElement){$this->arrPostElement=$arrPostElement;} protected function getElement($arrElement,$arrElementKey,$strElementKey='format'){$strFirstDimensionKey=$arrElementKey[0];if(!isset($arrElement[$strFirstDimensionKey])||!is_array($arrElement[$strFirstDimensionKey]))return 'ERROR_A';if(isset($arrElement[$strFirstDimensionKey][$strElementKey])&&!is_array($arrElement[$strFirstDimensionKey][$strElementKey]))return $arrElement[$strFirstDimensionKey][$strElementKey];if(!isset($arrElementKey[1]))return 'ERROR_B';$strKey=$arrElementKey[1];if(isset($arrElement[$strFirstDimensionKey][$strElementKey][$strKey]))return $arrElement[$strFirstDimensionKey][$strElementKey][$strKey];return 'ERROR_C';} protected function getElementKey($arrElement,$strFirstDimensionKey){if(!isset($arrElement[$strFirstDimensionKey]))return;$arrEkementKey=array(0=>$strFirstDimensionKey);if(!is_array($arrElement[$strFirstDimensionKey]))return $arrEkementKey;foreach($arrElement[$strFirstDimensionKey] as $k=>$v){$arrEkementKey[]=$k;return $arrEkementKey;}} public function getFieldID(){if(isset($this->strFieldID)&&$this->strFieldID)return $this->strFieldID;foreach($this->arrPostElement['submit'] as $strKey=>$v){$this->strFieldID=$strKey;return $this->strFieldID;}}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_ImportOptions')):class AmazonAutoLinks_AdminPageFramework_ImportOptions extends AmazonAutoLinks_AdminPageFramework_CustomSubmitFields{ public function __construct($arrFilesImport,$arrPostImport){parent::__construct($arrPostImport);$this->arrFilesImport=$arrFilesImport;$this->arrPostImport=$arrPostImport;$this->strFieldID=$this->getFieldID();$this->arrElementKey=$this->getElementKey($arrPostImport['submit'],$this->strFieldID);} private function getElementInFilesArray($arrFilesImport,$arrElementKey,$strElementKey='error'){$strElementKey=strtolower($strElementKey);$strFieldID=$arrElementKey[0];if(!isset($arrFilesImport[$strElementKey][$strFieldID]))return 'ERROR_A: The given key does not exist.';if(isset($arrFilesImport[$strElementKey][$strFieldID])&&!is_array($arrFilesImport[$strElementKey][$strFieldID]))return $arrFilesImport[$strElementKey][$strFieldID];if(!isset($arrElementKey[1]))return 'ERROR_B: the sub element is not set.';$strKey=$arrElementKey[1];if(isset($arrPostImport[$strElementKey][$strFieldID][$strKey]))return $arrPostImport[$strElementKey][$strFieldID][$strKey];return 'ERROR_C: unexpected problem occurred.';} public function getError(){return $this->getElementInFilesArray($this->arrFilesImport,$this->arrElementKey,'error');} public function getType(){return $this->getElementInFilesArray($this->arrFilesImport,$this->arrElementKey,'type');} public function getImportData(){$strFilePath=$this->getElementInFilesArray($this->arrFilesImport,$this->arrElementKey,'tmp_name');$vData=file_exists($strFilePath)?file_get_contents($strFilePath,true):false;return $vData;} public function formatImportData(&$vData,$strFormatType=null){$strFormatType=isset($strFormatType)?$strFormatType:$this->getFormatType();switch(strtolower($strFormatType)){case 'text':return;case 'json':$vData=json_decode(( string )$vData,true);return;case 'array':default:$vData=maybe_unserialize(trim($vData));return;}} public function getFormatType(){$this->strFormatType=isset($this->strFormatType)&&$this->strFormatType?$this->strFormatType:$this->getElement($this->arrPostImport,$this->arrElementKey,'format');return $this->strFormatType;} public function getSiblingValue($strKey){return $this->getElement($this->arrPostImport,$this->arrElementKey,$strKey);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_ExportOptions')):class AmazonAutoLinks_AdminPageFramework_ExportOptions extends AmazonAutoLinks_AdminPageFramework_CustomSubmitFields{ public function __construct($arrPostExport,$strClassName){parent::__construct($arrPostExport);$this->arrPostExport=$arrPostExport;$this->strClassName=$strClassName;$this->strFieldID=$this->getFieldID();$this->arrElementKey=$this->getElementKey($arrPostExport['submit'],$this->strFieldID);$this->strFileName=$this->getElement($arrPostExport,$this->arrElementKey,'file_name');$this->strFormatType=$this->getElement($arrPostExport,$this->arrElementKey,'format');$this->fIsDataSet=$this->getElement($arrPostExport,$this->arrElementKey,'transient');} public function getTransientIfSet($vData){if($this->fIsDataSet){$strKey=$this->arrElementKey[1];$strTransient=isset($this->arrElementKey[1])?"{$this->strClassName}_{$this->strFieldID}_{$this->arrElementKey[1]}":"{$this->strClassName}_{$this->strFieldID}";$tmp=get_transient(md5($strTransient));if($tmp!==false){$vData=$tmp;delete_transient(md5($strTransient));}}return $vData;} public function getFileName(){return $this->strFileName;} public function getFormat(){return $this->strFormatType;} public function getSiblingValue($strKey){return $this->getElement($this->arrPostExport,$this->arrElementKey,$strKey);} public function doExport($vData,$strFileName=null,$strFormatType=null){$strFileName=isset($strFileName)?$strFileName:$this->strFileName;$strFormatType=isset($strFormatType)?$strFormatType:$this->strFormatType;header('Content-Description: File Transfer');header('Content-Disposition: attachment; filename='.$strFileName);switch(strtolower($strFormatType)){case 'text':if(is_array($vData)||is_object($vData)){$oDebug=new AmazonAutoLinks_AdminPageFramework_Debug;$strData=$oDebug->getArray($vData);die($strData);}die($vData);case 'json':die(json_encode(( array )$vData));case 'array':default:die(serialize(( array )$vData));}}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_LinkBase')):abstract class AmazonAutoLinks_AdminPageFramework_LinkBase extends AmazonAutoLinks_AdminPageFramework_Utilities{ private static $arrStructure_CallerInfo=array('strPath'=>null,'strType'=>null,'strName'=>null,'strURI'=>null,'strVersion'=>null,'strThemeURI'=>null,'strScriptURI'=>null,'strAuthorURI'=>null,'strAuthor'=>null,'strDescription'=>null,); protected function getCallerInfo($strCallerPath=null){$arrCallerInfo=self::$arrStructure_CallerInfo;$arrCallerInfo['strPath']=$strCallerPath;$arrCallerInfo['strType']=$this->getCallerType($arrCallerInfo['strPath']);if($arrCallerInfo['strType']=='unknown')return $arrCallerInfo;if($arrCallerInfo['strType']=='plugin')return $this->getScriptData($arrCallerInfo['strPath'],$arrCallerInfo['strType'])+$arrCallerInfo;if($arrCallerInfo['strType']=='theme'){$oTheme=wp_get_theme();return array('strName'=>$oTheme->Name,'strVersion'=>$oTheme->Version,'strThemeURI'=>$oTheme->get('ThemeURI'),'strURI'=>$oTheme->get('ThemeURI'),'strAuthorURI'=>$oTheme->get('AuthorURI'),'strAuthor'=>$oTheme->get('Author'),)+$arrCallerInfo;}} protected function getLibraryInfo(){return $this->getScriptData(__FILE__,'library')+self::$arrStructure_CallerInfo;} protected function getCallerType($strScriptPath){if(preg_match('/[\/\\\\]themes[\/\\\\]/',$strScriptPath,$m))return 'theme';if(preg_match('/[\/\\\\]plugins[\/\\\\]/',$strScriptPath,$m))return 'plugin';return 'unknown';} protected function getCallerPath(){foreach(debug_backtrace() as $arrDebugInfo){if($arrDebugInfo['file']==__FILE__)continue;return $arrDebugInfo['file'];}} protected function setFooterInfoLeft($arrScriptInfo,&$strFooterInfoLeft){$strDescription=empty($arrScriptInfo['strDescription'])?"":"&#13;{$arrScriptInfo['strDescription']}";$strVersion=empty($arrScriptInfo['strVersion'])?"":"&nbsp;{$arrScriptInfo['strVersion']}";$strPluginInfo=empty($arrScriptInfo['strURI'])?$arrScriptInfo['strName']:"<a href='{$arrScriptInfo['strURI']}' target='_blank' title='{$arrScriptInfo['strName']}{$strVersion}{$strDescription}'>{$arrScriptInfo['strName']}</a>";$strAuthorInfo=empty($arrScriptInfo['strAuthorURI'])?$arrScriptInfo['strAuthor']:"<a href='{$arrScriptInfo['strAuthorURI']}' target='_blank'>{$arrScriptInfo['strAuthor']}</a>";$strAuthorInfo=empty($arrScriptInfo['strAuthor'])?$strAuthorInfo:' by '.$strAuthorInfo;$strFooterInfoLeft=$strPluginInfo.$strAuthorInfo;} protected function setFooterInfoRight($arrScriptInfo,&$strFooterInfoRight){$strDescription=empty($arrScriptInfo['strDescription'])?"":"&#13;{$arrScriptInfo['strDescription']}";$strVersion=empty($arrScriptInfo['strVersion'])?"":"&nbsp;{$arrScriptInfo['strVersion']}";$strLibraryInfo=empty($arrScriptInfo['strURI'])?$arrScriptInfo['strName']:"<a href='{$arrScriptInfo['strURI']}' target='_blank' title='{$arrScriptInfo['strName']}{$strVersion}{$strDescription}'>{$arrScriptInfo['strName']}</a>";$strFooterInfoRight=$this->oMsg->___('powered_by').'&nbsp;'.$strLibraryInfo.", <a href='http://wordpress.org' target='_blank' title='WordPress {$GLOBALS['wp_version']}'>WordPress</a>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_LinkForPostType')):class AmazonAutoLinks_AdminPageFramework_LinkForPostType extends AmazonAutoLinks_AdminPageFramework_LinkBase{ public $arrFooterInfo=array('strLeft'=>'','strRight'=>'',); public function __construct($strPostTypeSlug,$strCallerPath=null,$oMsg=null){if(!is_admin())return;$this->strPostTypeSlug=$strPostTypeSlug;$this->strCallerPath=file_exists($strCallerPath)?$strCallerPath:$this->getCallerPath();$this->arrScriptInfo=$this->getCallerInfo($this->strCallerPath);$this->arrLibraryInfo=$this->getLibraryInfo();$this->oMsg=$oMsg;$this->strSettingPageLinkTitle=$this->oMsg->___('manage');add_filter('update_footer',array($this,'addInfoInFooterRight'),11);add_filter('admin_footer_text',array($this,'addInfoInFooterLeft'));$this->setFooterInfoLeft($this->arrScriptInfo,$this->arrFooterInfo['strLeft']);$this->setFooterInfoRight($this->arrLibraryInfo,$this->arrFooterInfo['strRight']);if($this->arrScriptInfo['strType']=='plugin')add_filter('plugin_action_links_'.plugin_basename($this->arrScriptInfo['strPath']),array($this,'addSettingsLinkInPluginListingPage'),20);if(isset($_GET['post_type'])&&$_GET['post_type']==$this->strPostTypeSlug)add_action('get_edit_post_link',array($this,'addPostTypeQueryInEditPostLink'),10,3);} public function addPostTypeQueryInEditPostLink($strURL,$intPostID=null,$strContext=null){return add_query_arg(array('post'=>$intPostID,'action'=>'edit','post_type'=>$this->strPostTypeSlug),$strURL);} public function addSettingsLinkInPluginListingPage($arrLinks){array_unshift($arrLinks,"<a href='edit.php?post_type={$this->strPostTypeSlug}'>".$this->strSettingPageLinkTitle."</a>");return $arrLinks;} public function addInfoInFooterLeft($strLinkHTML=''){if(!isset($_GET['post_type'])||$_GET['post_type']!=$this->strPostTypeSlug)return $strLinkHTML;if(empty($this->arrScriptInfo['strName']))return $strLinkHTML;return $this->arrFooterInfo['strLeft'];} public function addInfoInFooterRight($strLinkHTML=''){if(!isset($_GET['post_type'])||$_GET['post_type']!=$this->strPostTypeSlug)return $strLinkHTML;return $this->arrFooterInfo['strRight'];}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Link')):class AmazonAutoLinks_AdminPageFramework_Link extends AmazonAutoLinks_AdminPageFramework_LinkBase{ private $strCallerPath; private $oProps; public function __construct(&$oProps,$strCallerPath=null,$oMsg=null){if(!is_admin())return;$this->oProps=$oProps;$this->strCallerPath=file_exists($strCallerPath)?$strCallerPath:$this->getCallerPath();$this->oProps->arrScriptInfo=$this->getCallerInfo($this->strCallerPath);$this->oProps->arrLibraryInfo=$this->getLibraryInfo();$this->oMsg=$oMsg;add_filter('update_footer',array($this,'addInfoInFooterRight'),11);add_filter('admin_footer_text',array($this,'addInfoInFooterLeft'));$this->setFooterInfoLeft($this->oProps->arrScriptInfo,$this->oProps->arrFooterInfo['strLeft']);$this->setFooterInfoRight($this->oProps->arrLibraryInfo,$this->oProps->arrFooterInfo['strRight']);if($this->oProps->arrScriptInfo['strType']=='plugin')add_filter('plugin_action_links_'.plugin_basename($this->oProps->arrScriptInfo['strPath']),array($this,'addSettingsLinkInPluginListingPage'));} public static $arrStructure_SubMenuLink=array('strMenuTitle'=>null,'strURL'=>null,'strCapability'=>null,'numOrder'=>null,'strType'=>'link','fShowPageHeadingTab'=>true,'fShowInMenu'=>true,); public function addSubMenuLink($strMenuTitle,$strURL,$strCapability=null,$numOrder=null,$fShowPageHeadingTab=true,$fShowInMenu=true){$intCount=count($this->oProps->arrPages);$this->oProps->arrPages[$strURL]=array('strMenuTitle'=>$strMenuTitle,'strPageTitle'=>$strMenuTitle,'strURL'=>$strURL,'strType'=>'link','strCapability'=>isset($strCapability)?$strCapability:$this->oProps->strCapability,'numOrder'=>is_numeric($numOrder)?$numOrder:$intCount+10,'fShowPageHeadingTab'=>$fShowPageHeadingTab,'fShowInMenu'=>$fShowInMenu,);} public function addLinkToPluginDescription($vLinks){if(!is_array($vLinks))$this->oProps->arrPluginDescriptionLinks[]=$vLinks;else $this->oProps->arrPluginDescriptionLinks=array_merge($this->oProps->arrPluginDescriptionLinks,$vLinks);add_filter('plugin_row_meta',array($this,'addLinkToPluginDescription_Callback'),10,2);} public function addLinkToPluginTitle($vLinks){if(!is_array($vLinks))$this->oProps->arrPluginTitleLinks[]=$vLinks;else $this->oProps->arrPluginTitleLinks=array_merge($this->oProps->arrPluginTitleLinks,$vLinks);add_filter('plugin_action_links_'.plugin_basename($this->oProps->arrScriptInfo['strPath']),array($this,'AddLinkToPluginTitle_Callback'));} public function addInfoInFooterLeft($strLinkHTML=''){if(!isset($_GET['page'])||!$this->oProps->isPageAdded($_GET['page']))return $strLinkHTML;if(empty($this->oProps->arrScriptInfo['strName']))return $strLinkHTML;return $this->oProps->arrFooterInfo['strLeft'];} public function addInfoInFooterRight($strLinkHTML=''){if(!isset($_GET['page'])||!$this->oProps->isPageAdded($_GET['page']))return $strLinkHTML;return $this->oProps->arrFooterInfo['strRight'];} public function addSettingsLinkInPluginListingPage($arrLinks){$strLinkURL=preg_match('/^.+\.php/',$this->oProps->arrRootMenu['strPageSlug'])?add_query_arg(array('page'=>$this->oProps->strDefaultPageSlug),admin_url($this->oProps->arrRootMenu['strPageSlug'])):"admin.php?page={$this->oProps->strDefaultPageSlug}";array_unshift($arrLinks,'<a href="'.$strLinkURL.'">'.$this->oMsg->___('settings').'</a>');return $arrLinks;} public function addLinkToPluginDescription_Callback($arrLinks,$strFile){if($strFile!=plugin_basename($this->oProps->arrScriptInfo['strPath']))return $arrLinks;$arrAddingLinks=array();foreach($this->oProps->arrPluginDescriptionLinks as $vLinkHTML)if(is_array($vLinkHTML))$arrAddingLinks=array_merge($vLinkHTML,$arrAddingLinks);else $arrAddingLinks[]=( string )$vLinkHTML;return array_merge($arrLinks,$arrAddingLinks);} public function addLinkToPluginTitle_Callback($arrLinks){$arrAddingLinks=array();foreach($this->oProps->arrPluginTitleLinks as $vLinkHTML)if(is_array($vLinkHTML))$arrAddingLinks=array_merge($vLinkHTML,$arrAddingLinks);else $arrAddingLinks[]=( string )$vLinkHTML;return array_merge($arrLinks,$arrAddingLinks);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_Debug')):class AmazonAutoLinks_AdminPageFramework_Debug{ public function dumpArray($arr,$strFilePath=null){echo $this->getArray($arr,$strFilePath);} public function getArray($arr,$strFilePath=null,$fEncloseInTag=true){if($strFilePath)self::logArray($arr,$strFilePath);$strResult=htmlspecialchars(print_r($arr,true));return $fEncloseInTag?"<pre class='dump-array'>".$strResult."</pre>":$strResult;}static public function logArray($arr,$strFilePath=null){file_put_contents($strFilePath?$strFilePath:dirname(__FILE__).'/array_log.txt',date("Y/m/d H:i:s",current_time('timestamp')).PHP_EOL.print_r($arr,true).PHP_EOL.PHP_EOL,FILE_APPEND);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_Base')):abstract class AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base extends AmazonAutoLinks_AdminPageFramework_Utilities{ protected static $arrDefaultKeys=array('vValue'=>null,'vDefault'=>null,'fRepeatable'=>false,'vClassAttribute'=>'','vLabel'=>'','vDelimiter'=>'','vDisable'=>false,'vReadOnly'=>false,'vBeforeInputTag'=>'','vAfterInputTag'=>'','vLabelMinWidth'=>140,'strFieldID'=>null,'strPageSlug'=>null,'strSectionID'=>null,'strBeforeField'=>null,'strAfterField'=>null,); protected $oMsg;function __construct($strClassName,$strFieldTypeSlug,$oMsg=null,$fAutoRegister=true){$this->strFieldTypeSlug=$strFieldTypeSlug;$this->strClassName=$strClassName;$this->oMsg=$oMsg;if($fAutoRegister)add_filter("field_types_{$strClassName}",array($this,'replyToRegisterInputFieldType'));} public function replyToRegisterInputFieldType($arrFieldDefinitions){$arrFieldDefinitions[$this->strFieldTypeSlug]=$this->getDefinitionArray();return $arrFieldDefinitions;} public function getDefinitionArray(){return array('callRenderField'=>array($this,"replyToGetInputField"),'callGetScripts'=>array($this,"replyToGetInputScripts"),'callGetStyles'=>array($this,"replyToGetInputStyles"),'callGetIEStyles'=>array($this,"replyToGetInputIEStyles"),'callFieldLoader'=>array($this,"replyToFieldLoader"),'arrEnqueueScripts'=>$this->getEnqueuingScripts(),'arrEnqueueStyles'=>$this->getEnqueuingStyles(),'arrDefaultKeys'=>$this->getDefaultKeys()+self::$arrDefaultKeys,);} public function replytToGetInputField(){return '';} public function replyToGetInputScripts(){return '';} public function replyToGetInputIEStyles(){return '';} public function replyToGetInputStyles(){return '';} public function replyToFieldLoader(){} protected function getEnqueuingScripts(){return array();} protected function getEnqueuingStyles(){return array();} protected function getDefaultKeys(){return array();}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_CustomFieldType')):abstract class AmazonAutoLinks_AdminPageFramework_CustomFieldType extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_default')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_default extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array();} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];foreach(( array )$vValue as $strKey=>$strValue)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).(($strLabel=$this->getCorrespondingArrayValue($arrField['vLabel'],$strKey,$arrDefaultKeys['vLabel']))?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>{$strLabel}</span>":"")."<div class='admin-page-framework-input-container'>".$strValue."</div>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-default' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_text')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_text extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ public function replyToRegisterInputFieldType($arrFieldDefinitions){foreach(array('text','password','date','datetime','datetime-local','email','month','search','tel','url','week',) as $strTextTypeSlug)$arrFieldDefinitions[$strTextTypeSlug]=$this->getDefinitionArray();return $arrFieldDefinitions;} protected function getDefaultKeys(){return array('vSize'=>30,'vMaxLength'=>400,);} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];$fMultiple=is_array($arrFields);foreach(( array )$arrFields as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,'').($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":"")."<input id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,'')."' "."size='".$this->getCorrespondingArrayValue($arrField['vSize'],$strKey,30)."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."type='{$arrField['strType']}' "."name=".(is_array($arrFields)?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='".$this->getCorrespondingArrayValue($vValue,$strKey,null)."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'')."/>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,'')."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,'',true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-text' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_number')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_number extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ public function replyToRegisterInputFieldType($arrFieldDefinitions){foreach(array('number','range') as $strTextTypeSlug)$arrFieldDefinitions[$strTextTypeSlug]=$this->getDefinitionArray();return $arrFieldDefinitions;} protected function getDefaultKeys(){return array('vMin'=>null,'vMax'=>null,'vStep'=>null,'vSize'=>30,'vMaxLength'=>400,);} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];foreach(( array )$arrFields as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}' >".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,'').($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":"")."<input id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,'')."' "."size='".$this->getCorrespondingArrayValue($arrField['vSize'],$strKey,30)."' "."type='{$arrField['strType']}' "."name=".(is_array($arrFields)?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='".$this->getCorrespondingArrayValue($vValue,$strKey,null)."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'')."min='".$this->getCorrespondingArrayValue($arrField['vMin'],$strKey,$arrDefaultKeys['vMin'])."' "."max='".$this->getCorrespondingArrayValue($arrField['vMax'],$strKey,$arrDefaultKeys['vMax'])."' "."step='".$this->getCorrespondingArrayValue($arrField['vStep'],$strKey,$arrDefaultKeys['vStep'])."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."/>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,'')."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,'',true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-number' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_textarea')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_textarea extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vRows'=>4,'vCols'=>80,'vRich'=>false,'vMaxLength'=>400,);} public function replyToGetInputStyles(){return "	/* Rich Text Editor */
			.admin-page-framework-field-textarea .wp-core-ui.wp-editor-wrap {
				margin-bottom: 0.5em;
			}		
		".PHP_EOL;} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];$fSingle=!is_array($arrFields);foreach(( array )$arrFields as $strKey=>$strLabel){$arrRichEditorSettings=$fSingle?$arrField['vRich']:$this->getCorrespondingArrayValue($arrField['vRich'],$strKey,null);$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}' >".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,'').($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":"").(!empty($arrRichEditorSettings)&&version_compare($GLOBALS['wp_version'],'3.3','>=')&&function_exists('wp_editor')?wp_editor($this->getCorrespondingArrayValue($vValue,$strKey,null),"{$strTagID}_{$strKey}",$this->uniteArrays(( array )$arrRichEditorSettings,array('wpautop'=>true,'media_buttons'=>true,'textarea_name'=>is_array($arrFields)?"{$strFieldName}[{$strKey}]":$strFieldName,'textarea_rows'=>$this->getCorrespondingArrayValue($arrField['vRows'],$strKey,$arrDefaultKeys['vRows']),'tabindex'=>'','tabfocus_elements'=>':prev,:next','editor_css'=>'','editor_class'=>$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,''),'teeny'=>false,'dfw'=>false,'tinymce'=>true,'quicktags'=>true))).$this->getScriptForRichEditor("{$strTagID}_{$strKey}"):"<textarea id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,'')."' "."rows='".$this->getCorrespondingArrayValue($arrField['vRows'],$strKey,$arrDefaultKeys['vRows'])."' "."cols='".$this->getCorrespondingArrayValue($arrField['vCols'],$strKey,$arrDefaultKeys['vCols'])."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."type='{$arrField['strType']}' "."name=".(is_array($arrFields)?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ").($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'').">".$this->getCorrespondingArrayValue($vValue,$strKey,null)."</textarea>").$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,'')."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,'',true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");}return "<div class='admin-page-framework-field-textarea' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function getScriptForRichEditor($strIDSelector){return "<script type='text/javascript'>
				jQuery( '#wp-{$strIDSelector}-wrap' ).hide();
				jQuery( document ).ready( function() {
					jQuery( '#wp-{$strIDSelector}-wrap' ).appendTo( '#field-{$strIDSelector}' );
					jQuery( '#wp-{$strIDSelector}-wrap' ).show();
				})
			</script>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_color')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_color extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vSize'=>10,'vMaxLength'=>400,);} public function replyToFieldLoader(){if(version_compare($GLOBALS['wp_version'],'3.5','>=')){wp_enqueue_style('wp-color-picker');wp_enqueue_script('wp-color-picker');}else {wp_enqueue_style('farbtastic');wp_enqueue_script('farbtastic');}} public function replyToGetInputStyles(){return "/* Color Picker */
			.repeatable .colorpicker {
				display: inline;
			}
			.admin-page-framework-field-color .wp-picker-container {
				vertical-align: middle;
			}
			.admin-page-framework-field-color .ui-widget-content {
				border: none;
				background: none;
				color: transparent;
			}
			.admin-page-framework-field-color .ui-slider-vertical {
				width: inherit;
				height: auto;
				margin-top: -11px;
			}	
			".PHP_EOL;} public function replyToGetInputScripts(){return "
			registerAPFColorPickerField = function( strInputID ) {
				'use strict';
				// This if statement checks if the color picker element exists within jQuery UI
				// If it does exist then we initialize the WordPress color picker on our text input field
				if( typeof jQuery.wp === 'object' && typeof jQuery.wp.wpColorPicker === 'function' ){
					var myColorPickerOptions = {
						defaultColor: false,	// you can declare a default color here, or in the data-default-color attribute on the input				
						change: function(event, ui){},	// a callback to fire whenever the color changes to a valid color. reference : http://automattic.github.io/Iris/			
						clear: function() {},	// a callback to fire when the input is emptied or an invalid color
						hide: true,	// hide the color picker controls on load
						palettes: true	// show a group of common colors beneath the square or, supply an array of colors to customize further
					};			
					jQuery( '#' + strInputID ).wpColorPicker( myColorPickerOptions );
				}
				else {
					// We use farbtastic if the WordPress color picker widget doesn't exist
					jQuery( '#color_' + strInputID ).farbtastic( '#' + strInputID );
				}
			}
		";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];foreach(( array )$arrFields as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":"")."<input id='{$strTagID}_{$strKey}' "."class='input_color ".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."size='".$this->getCorrespondingArrayValue($arrField['vSize'],$strKey,$arrDefaultKeys['vSize'])."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."type='text' "."name=".(is_array($arrFields)?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='".($this->getCorrespondingArrayValue($vValue,$strKey,'transparent'))."' "."color='".($this->getCorrespondingArrayValue($vValue,$strKey,'transparent'))."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'')."/>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."<div class='colorpicker' id='color_{$strTagID}_{$strKey}' rel='{$strTagID}_{$strKey}'></div>".$this->getColorPickerEnablerScript("{$strTagID}_{$strKey}")."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-color' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function getColorPickerEnablerScript($strInputID){return "<script type='text/javascript' class='color-picker-enabler-script'>
					jQuery( document ).ready( function(){
						registerAPFColorPickerField( '{$strInputID}' );
					});
				</script>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_image')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_image extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('arrCaptureAttributes'=>array(),'vSize'=>60,'vMaxLength'=>400,'vImagePreview'=>true,'strTickBoxTitle'=>'','strLabelUseThis'=>'','fAllowExternalSource'=>true,);} public function replyToFieldLoader(){$this->enqueueMediaUploader();} protected function enqueueMediaUploader(){add_filter('media_upload_tabs',array($this,'replyToRemovingMediaLibraryTab'));wp_enqueue_script('jquery');wp_enqueue_script('thickbox');wp_enqueue_style('thickbox');if(function_exists('wp_enqueue_media'))wp_enqueue_media();else wp_enqueue_script('media-upload');} public function replyToRemovingMediaLibraryTab($arrTabs){if(!isset($_REQUEST['enable_external_source']))return $arrTabs;if(!$_REQUEST['enable_external_source'])unset($arrTabs['type_url']);return $arrTabs;} public function replyToGetInputScripts(){return $this->getScript_CustomMediaUploaderObject().PHP_EOL.$this->getScript_ImageSelector("admin_page_framework",$this->oMsg->___('upload_image'),$this->oMsg->___('use_this_image'));} protected function getScript_CustomMediaUploaderObject(){$fLoaded=isset($GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['fIsLoadedCustomMediaUploaderObject'])?$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['fIsLoadedCustomMediaUploaderObject']:false;if(!function_exists('wp_enqueue_media')||$fLoaded)return "";$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['fIsLoadedCustomMediaUploaderObject']=true;return "
				getAPFCustomMediaUploaderSelectObject = function() {
					return wp.media.view.MediaFrame.Select.extend({

						initialize: function() {
							wp.media.view.MediaFrame.prototype.initialize.apply( this, arguments );

							_.defaults( this.options, {
								multiple:  true,
								editing:   false,
								state:    'insert'
							});

							this.createSelection();
							this.createStates();
							this.bindHandlers();
							this.createIframeStates();
						},

						createStates: function() {
							var options = this.options;

							// Add the default states.
							this.states.add([
								// Main states.
								new wp.media.controller.Library({
									id:         'insert',
									title:      'Insert Media',
									priority:   20,
									toolbar:    'main-insert',
									filterable: 'image',
									library:    wp.media.query( options.library ),
									multiple:   options.multiple ? 'reset' : false,
									editable:   true,

									// If the user isn't allowed to edit fields,
									// can they still edit it locally?
									allowLocalEdits: true,

									// Show the attachment display settings.
									displaySettings: true,
									// Update user settings when users adjust the
									// attachment display settings.
									displayUserSettings: true
								}),

								// Embed states.
								new wp.media.controller.Embed(),
							]);


							if ( wp.media.view.settings.post.featuredImageId ) {
								this.states.add( new wp.media.controller.FeaturedImage() );
							}
						},

						bindHandlers: function() {
							// from Select
							this.on( 'router:create:browse', this.createRouter, this );
							this.on( 'router:render:browse', this.browseRouter, this );
							this.on( 'content:create:browse', this.browseContent, this );
							this.on( 'content:render:upload', this.uploadContent, this );
							this.on( 'toolbar:create:select', this.createSelectToolbar, this );
							//

							this.on( 'menu:create:gallery', this.createMenu, this );
							this.on( 'toolbar:create:main-insert', this.createToolbar, this );
							this.on( 'toolbar:create:main-gallery', this.createToolbar, this );
							this.on( 'toolbar:create:featured-image', this.featuredImageToolbar, this );
							this.on( 'toolbar:create:main-embed', this.mainEmbedToolbar, this );

							var handlers = {
									menu: {
										'default': 'mainMenu'
									},

									content: {
										'embed':          'embedContent',
										'edit-selection': 'editSelectionContent'
									},

									toolbar: {
										'main-insert':      'mainInsertToolbar'
									}
								};

							_.each( handlers, function( regionHandlers, region ) {
								_.each( regionHandlers, function( callback, handler ) {
									this.on( region + ':render:' + handler, this[ callback ], this );
								}, this );
							}, this );
						},

						// Menus
						mainMenu: function( view ) {
							view.set({
								'library-separator': new wp.media.View({
									className: 'separator',
									priority: 100
								})
							});
						},

						// Content
						embedContent: function() {
							var view = new wp.media.view.Embed({
								controller: this,
								model:      this.state()
							}).render();

							this.content.set( view );
							view.url.focus();
						},

						editSelectionContent: function() {
							var state = this.state(),
								selection = state.get('selection'),
								view;

							view = new wp.media.view.AttachmentsBrowser({
								controller: this,
								collection: selection,
								selection:  selection,
								model:      state,
								sortable:   true,
								search:     false,
								dragInfo:   true,

								AttachmentView: wp.media.view.Attachment.EditSelection
							}).render();

							view.toolbar.set( 'backToLibrary', {
								text:     'Return to Library',
								priority: -100,

								click: function() {
									this.controller.content.mode('browse');
								}
							});

							// Browse our library of attachments.
							this.content.set( view );
						},

						// Toolbars
						selectionStatusToolbar: function( view ) {
							var editable = this.state().get('editable');

							view.set( 'selection', new wp.media.view.Selection({
								controller: this,
								collection: this.state().get('selection'),
								priority:   -40,

								// If the selection is editable, pass the callback to
								// switch the content mode.
								editable: editable && function() {
									this.controller.content.mode('edit-selection');
								}
							}).render() );
						},

						mainInsertToolbar: function( view ) {
							var controller = this;

							this.selectionStatusToolbar( view );

							view.set( 'insert', {
								style:    'primary',
								priority: 80,
								text:     'Select Image',
								requires: { selection: true },

								click: function() {
									var state = controller.state(),
										selection = state.get('selection');

									controller.close();
									state.trigger( 'insert', selection ).reset();
								}
							});
						},

						featuredImageToolbar: function( toolbar ) {
							this.createSelectToolbar( toolbar, {
								text:  'Set Featured Image',
								state: this.options.state || 'upload'
							});
						},

						mainEmbedToolbar: function( toolbar ) {
							toolbar.view = new wp.media.view.Toolbar.Embed({
								controller: this,
								text: 'Insert Image'
							});
						}		
					});
				}
			";} private function getScript_ImageSelector($strReferrer,$strThickBoxTitle,$strThickBoxButtonUseThis){if(!function_exists('wp_enqueue_media'))return "
					jQuery( document ).ready( function(){
						jQuery( '.select_image' ).click( function() {
							pressed_id = jQuery( this ).attr( 'id' );
							field_id = pressed_id.substring( 13 );	// remove the select_image_ prefix
							var fExternalSource = jQuery( this ).attr( 'data-enable_external_source' );
							tb_show( '{$strThickBoxTitle}', 'media-upload.php?post_id=1&amp;enable_external_source=' + fExternalSource + '&amp;referrer={$strReferrer}&amp;button_label={$strThickBoxButtonUseThis}&amp;type=image&amp;TB_iframe=true', false );
							return false;	// do not click the button after the script by returning false.
						});
						
						window.original_send_to_editor = window.send_to_editor;
						window.send_to_editor = function( strRawHTML ) {

							var strHTML = '<div>' + strRawHTML + '</div>';	// This is for the 'From URL' tab. Without the wrapper element. the below attr() method don't catch attributes.
							var src = jQuery( 'img', strHTML ).attr( 'src' );
							var alt = jQuery( 'img', strHTML ).attr( 'alt' );
							var title = jQuery( 'img', strHTML ).attr( 'title' );
							var width = jQuery( 'img', strHTML ).attr( 'width' );
							var height = jQuery( 'img', strHTML ).attr( 'height' );
							var classes = jQuery( 'img', strHTML ).attr( 'class' );
							var id = ( classes ) ? classes.replace( /(.*?)wp-image-/, '' ) : '';	// attachment ID	
							var strCaption = strRawHTML.replace( /\[(\w+).*?\](.*?)\[\/(\w+)\]/m, '$2' )
								.replace( /<a.*?>(.*?)<\/a>/m, '' );
							var align = strRawHTML.replace( /^.*?\[\w+.*?\salign=([\'\"])(.*?)[\'\"]\s.+$/mg, '$2' );	//\'\" syntax fixer
							var link = jQuery( strHTML ).find( 'a:first' ).attr( 'href' );

							// Escape the strings of some of the attributes.
							var strCaption = jQuery( '<div/>' ).text( strCaption ).html();
							var strAlt = jQuery( '<div/>' ).text( alt ).html();
							var strTitle = jQuery( '<div/>' ).text( title ).html();						
							
							// If the user wants to save relevant attributes, set them.
							jQuery( '#' + field_id ).val( src );	// sets the image url in the main text field. The url field is mandatory so it does not have the suffix.
							jQuery( '#' + field_id + '_id' ).val( id );
							jQuery( '#' + field_id + '_width' ).val( width );
							jQuery( '#' + field_id + '_height' ).val( height );
							jQuery( '#' + field_id + '_caption' ).val( strCaption );
							jQuery( '#' + field_id + '_alt' ).val( strAlt );
							jQuery( '#' + field_id + '_title' ).val( strTitle );						
							jQuery( '#' + field_id + '_align' ).val( align );						
							jQuery( '#' + field_id + '_link' ).val( link );						
							
							// Update the preview
							jQuery( '#image_preview_' + field_id ).attr( 'alt', alt );
							jQuery( '#image_preview_' + field_id ).attr( 'title', strTitle );
							jQuery( '#image_preview_' + field_id ).attr( 'data-classes', classes );
							jQuery( '#image_preview_' + field_id ).attr( 'data-id', id );
							jQuery( '#image_preview_' + field_id ).attr( 'src', src );	// updates the preview image
							jQuery( '#image_preview_container_' + field_id ).css( 'display', '' );	// updates the visibility
							jQuery( '#image_preview_' + field_id ).show()	// updates the visibility
							
							// restore the original send_to_editor
							window.send_to_editor = window.original_send_to_editor;
							
							// close the thickbox
							tb_remove();	

						}
					});
				";return "jQuery( document ).ready( function(){

				// Global Function Literal 
				setAPFImageUploader = function( strInputID, fMultiple, fExternalSource ) {

					jQuery( '#select_image_' + strInputID ).unbind( 'click' );	// for repeatable fields
					jQuery( '#select_image_' + strInputID ).click( function( e ) {
						
						window.wpActiveEditor = null;						
						e.preventDefault();
						
						// If the uploader object has already been created, reopen the dialog
						if ( custom_uploader ) {
							custom_uploader.open();
							return;
						}					
						
						// Store the original select object in a global variable
						oAPFOriginalImageUploaderSelectObject = wp.media.view.MediaFrame.Select;
						
						// Assign a custom select object.
						wp.media.view.MediaFrame.Select = fExternalSource ? getAPFCustomMediaUploaderSelectObject() : oAPFOriginalImageUploaderSelectObject;
						var custom_uploader = wp.media({
							title: '{$strThickBoxTitle}',
							button: {
								text: '{$strThickBoxButtonUseThis}'
							},
							library     : { type : 'image' },
							multiple: fMultiple  // Set this to true to allow multiple files to be selected
						});
			
						// When the uploader window closes, 
						custom_uploader.on( 'close', function() {

							var state = custom_uploader.state();
							
							// Check if it's an external URL
							if ( typeof( state.props ) != 'undefined' && typeof( state.props.attributes ) != 'undefined' ) 
								var image = state.props.attributes;	
							
							// If the image variable is not defined at this point, it's an attachment, not an external URL.
							if ( typeof( image ) !== 'undefined'  ) {
								setPreviewElement( strInputID, image );
							} else {
								
								var selection = custom_uploader.state().get( 'selection' );
								selection.each( function( attachment, index ) {
									attachment = attachment.toJSON();
									if( index == 0 ){	
										// place first attachment in field
										setPreviewElement( strInputID, attachment );
									} else{
										
										var field_container = jQuery( '#' + strInputID ).closest( '.admin-page-framework-field' );
										var new_field = addAPFRepeatableField( field_container.attr( 'id' ) );
										var strInputIDOfNewField = new_field.find( 'input' ).attr( 'id' );
										setPreviewElement( strInputIDOfNewField, attachment );
			
									}
								});				
								
							}
							
							// Restore the original select object.
							wp.media.view.MediaFrame.Select = oAPFOriginalImageUploaderSelectObject;
											
						});
						
						// Open the uploader dialog
						custom_uploader.open();											
						return false;       
					});	
				
					var setPreviewElement = function( strInputID, image ) {

						// Escape the strings of some of the attributes.
						var strCaption = jQuery( '<div/>' ).text( image.caption ).html();
						var strAlt = jQuery( '<div/>' ).text( image.alt ).html();
						var strTitle = jQuery( '<div/>' ).text( image.title ).html();
						
						// If the user want the attributes to be saved, set them in the input tags.
						jQuery( 'input#' + strInputID ).val( image.url );		// the url field is mandatory so it does not have the suffix.
						jQuery( 'input#' + strInputID + '_id' ).val( image.id );
						jQuery( 'input#' + strInputID + '_width' ).val( image.width );
						jQuery( 'input#' + strInputID + '_height' ).val( image.height );
						jQuery( 'input#' + strInputID + '_caption' ).val( strCaption );
						jQuery( 'input#' + strInputID + '_alt' ).val( strAlt );
						jQuery( 'input#' + strInputID + '_title' ).val( strTitle );
						jQuery( 'input#' + strInputID + '_align' ).val( image.align );
						jQuery( 'input#' + strInputID + '_link' ).val( image.link );
						
						// Update up the preview
						jQuery( '#image_preview_' + strInputID ).attr( 'data-id', image.id );
						jQuery( '#image_preview_' + strInputID ).attr( 'data-width', image.width );
						jQuery( '#image_preview_' + strInputID ).attr( 'data-height', image.height );
						jQuery( '#image_preview_' + strInputID ).attr( 'data-caption', strCaption );
						jQuery( '#image_preview_' + strInputID ).attr( 'alt', strAlt );
						jQuery( '#image_preview_' + strInputID ).attr( 'title', strTitle );
						jQuery( '#image_preview_' + strInputID ).attr( 'src', image.url );
						jQuery( '#image_preview_container_' + strInputID ).show();				
						
					}
				}		
			});
			";} public function replyToGetInputStyles(){return "/* Image Field Preview Container */
			.admin-page-framework-field .image_preview {
				border: none; 
				clear:both; 
				margin-top: 1em;
				margin-bottom: 1em;
				display: block; 
			}		
			@media only screen and ( max-width: 1200px ) {
				.admin-page-framework-field .image_preview {
					max-width: 600px;
				}
			} 
			@media only screen and ( max-width: 900px ) {
				.admin-page-framework-field .image_preview {
					max-width: 440px;
				}
			}	
			@media only screen and ( max-width: 600px ) {
				.admin-page-framework-field .image_preview {
					max-width: 300px;
				}
			}		
			@media only screen and ( max-width: 480px ) {
				.admin-page-framework-field .image_preview {
					max-width: 240px;
				}
			}
			@media only screen and ( min-width: 1200px ) {
				.admin-page-framework-field .image_preview {
					max-width: 600px;
				}
			}		 
			.admin-page-framework-field .image_preview img {		
				width: auto;
				height: auto; 
				max-width: 100%;
				display: block;
			}
		/* Image Uploader Button */
			.admin-page-framework-field-image input {
				margin-right: 0.5em;
			}
			.select_image.button.button-small {
				vertical-align: baseline;
			}			
		".PHP_EOL;} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];$fMultipleFields=is_array($arrFields);$fRepeatable=$arrField['fRepeatable'];foreach(( array )$arrFields as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>".$this->getImageInputTags($vValue,$arrField,$strFieldName,$strTagID,$strKey,$strLabel,$fMultipleFields,$arrDefaultKeys)."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-image' id='{$strTagID}'>".implode(PHP_EOL,$arrOutput)."</div>";} private function getImageInputTags($vValue,$arrField,$strFieldName,$strTagID,$strKey,$strLabel,$fMultipleFields,$arrDefaultKeys){$intCountAttributes=count(( array )$arrField['arrCaptureAttributes']);$arrOutputs=array(($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":'')."<input id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."size='".$this->getCorrespondingArrayValue($arrField['vSize'],$strKey,$arrDefaultKeys['vSize'])."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."type='text' "."name='".($fMultipleFields?"{$strFieldName}[{$strKey}]":"{$strFieldName}").($intCountAttributes?"[url]":"")."' "."value='".($strImageURL=$this->getImageInputValue($vValue,$strKey,$fMultipleFields,$intCountAttributes?'url':'',$arrDefaultKeys))."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'')."/>");foreach(( array )$arrField['arrCaptureAttributes'] as $strAttribute)$arrOutputs[]="<input id='{$strTagID}_{$strKey}_{$strAttribute}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='hidden' "."name='".($fMultipleFields?"{$strFieldName}[{$strKey}]":"{$strFieldName}")."[{$strAttribute}]' "."value='".$this->getImageInputValue($vValue,$strKey,$fMultipleFields,$strAttribute,$arrDefaultKeys)."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>";return "<div class='admin-page-framework-input-label-container admin-page-framework-input-container image-field'>"."<label for='{$strTagID}_{$strKey}' >".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).implode(PHP_EOL,$arrOutputs).PHP_EOL.$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>".($this->getCorrespondingArrayValue($arrField['vImagePreview'],$strKey,true)?"<div id='image_preview_container_{$strTagID}_{$strKey}' "."class='image_preview' "."style='".($strImageURL?"":"display : none;")."'".">"."<img src='{$strImageURL}' "."id='image_preview_{$strTagID}_{$strKey}' "."/>"."</div>":"").$this->getImageUploaderButtonScript("{$strTagID}_{$strKey}",$arrField['fRepeatable']?true:false,$arrField['fAllowExternalSource']?true:false);} private function getImageInputValue($vValue,$strKey,$fMultipleFields,$strCaptureAttribute,$arrDefaultKeys){$vValue=$fMultipleFields?$this->getCorrespondingArrayValue($vValue,$strKey,$arrDefaultKeys['vDefault']):(isset($vValue)?$vValue:$arrDefaultKeys['vDefault']);return $strCaptureAttribute?(isset($vValue[$strCaptureAttribute])?$vValue[$strCaptureAttribute]:""):$vValue;} private function getImageUploaderButtonScript($strInputID,$fRpeatable,$fExternalSource){$strButton="<a id='select_image_{$strInputID}' "."href='#' "."class='select_image button button-small'"."data-uploader_type='".(function_exists('wp_enqueue_media')?1:0)."'"."data-enable_external_source='".($fExternalSource?1:0)."'".">".$this->oMsg->___('select_image')."</a>";$strScript="
				if ( jQuery( 'a#select_image_{$strInputID}' ).length == 0 ) {
					jQuery( 'input#{$strInputID}' ).after( \"{$strButton}\" );
				}			
			".PHP_EOL;if(function_exists('wp_enqueue_media'))$strScript.="
					jQuery( document ).ready( function(){			
						setAPFImageUploader( '{$strInputID}', '{$fRpeatable}', '{$fExternalSource}' );
					});".PHP_EOL;return "<script type='text/javascript'>".$strScript."</script>".PHP_EOL;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_media')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_media extends AmazonAutoLinks_AdminPageFramework_InputFieldType_image{ protected function getDefaultKeys(){return array('arrCaptureAttributes'=>array(),'vSize'=>60,'vMaxLength'=>400,'strTickBoxTitle'=>'','strLabelUseThis'=>'','fAllowExternalSource'=>true,);} public function replyToFieldLoader(){$this->enqueueMediaUploader();} public function replyToGetInputScripts(){return $this->getScript_CustomMediaUploaderObject().PHP_EOL.$this->getScript_MediaUploader("admin_page_framework",$this->oMsg->___('upload_file'),$this->oMsg->___('use_this_file'));} private function getScript_MediaUploader($strReferrer,$strThickBoxTitle,$strThickBoxButtonUseThis){if(!function_exists('wp_enqueue_media'))return "
					jQuery( document ).ready( function(){
						jQuery( '.select_media' ).click( function() {
							pressed_id = jQuery( this ).attr( 'id' );
							field_id = pressed_id.substring( 13 );	// remove the select_file_ prefix
							var fExternalSource = jQuery( this ).attr( 'data-enable_external_source' );					
							tb_show( '{$strThickBoxTitle}', 'media-upload.php?post_id=1&amp;enable_external_source=' + fExternalSource + '&amp;referrer={$strReferrer}&amp;button_label={$strThickBoxButtonUseThis}&amp;type=media&amp;TB_iframe=true', false );
							return false;	// do not click the button after the script by returning false.
						});
						
						window.original_send_to_editor = window.send_to_editor;
						window.send_to_editor = function( strRawHTML, param ) {

							var strHTML = '<div>' + strRawHTML + '</div>';	// This is for the 'From URL' tab. Without the wrapper element. the below attr() method don't catch attributes.
							var src = jQuery( 'a', strHTML ).attr( 'href' );
							var classes = jQuery( 'a', strHTML ).attr( 'class' );
							var id = ( classes ) ? classes.replace( /(.*?)wp-image-/, '' ) : '';	// attachment ID	
						
							// If the user wants to save relavant attributes, set them.
							jQuery( '#' + field_id ).val( src );	// sets the image url in the main text field. The url field is mandatory so it does not have the suffix.
							jQuery( '#' + field_id + '_id' ).val( id );			
								
							// restore the original send_to_editor
							window.send_to_editor = window.original_send_to_editor;
							
							// close the thickbox
							tb_remove();	

						}
					});
				";return "
			jQuery( document ).ready( function(){		
				// Global Function Literal 
				setAPFMediaUploader = function( strInputID, fMultiple, fExternalSource ) {

					jQuery( '#select_media_' + strInputID ).unbind( 'click' );	// for repeatable fields
					jQuery( '#select_media_' + strInputID ).click( function( e ) {
						
						window.wpActiveEditor = null;						
						e.preventDefault();
						
						// If the uploader object has already been created, reopen the dialog
						if ( media_uploader ) {
							media_uploader.open();
							return;
						}		
						
						// Store the original select object in a global variable
						oAPFOriginalMediaUploaderSelectObject = wp.media.view.MediaFrame.Select;
						
						// Assign a custom select object.
						wp.media.view.MediaFrame.Select = fExternalSource ? getAPFCustomMediaUploaderSelectObject() : oAPFOriginalMediaUploaderSelectObject;
						var media_uploader = wp.media({
							title: '{$strThickBoxTitle}',
							button: {
								text: '{$strThickBoxButtonUseThis}'
							},
							multiple: fMultiple  // Set this to true to allow multiple files to be selected
						});
			
						// When the uploader window closes, 
						media_uploader.on( 'close', function() {

							var state = media_uploader.state();
							
							// Check if it's an external URL
							if ( typeof( state.props ) != 'undefined' && typeof( state.props.attributes ) != 'undefined' ) 
								var image = state.props.attributes;	
							
							// If the image variable is not defined at this point, it's an attachment, not an external URL.
							if ( typeof( image ) !== 'undefined'  ) {
								setPreviewElement( strInputID, image );
							} else {
								
								var selection = media_uploader.state().get( 'selection' );
								selection.each( function( attachment, index ) {
									attachment = attachment.toJSON();
									if( index == 0 ){	
										// place first attachment in field
										setPreviewElement( strInputID, attachment );
									} else{
										
										var field_container = jQuery( '#' + strInputID ).closest( '.admin-page-framework-field' );
										var new_field = addAPFRepeatableField( field_container.attr( 'id' ) );
										var strInputIDOfNewField = new_field.find( 'input' ).attr( 'id' );
										setPreviewElement( strInputIDOfNewField, attachment );
			
									}
								});				
								
							}
							
							// Restore the original select object.
							wp.media.view.MediaFrame.Select = oAPFOriginalMediaUploaderSelectObject;	
							
						});
						
						// Open the uploader dialog
						media_uploader.open();											
						return false;       
					});	
				
					var setPreviewElement = function( strInputID, image ) {
									
						// If the user want the attributes to be saved, set them in the input tags.
						jQuery( '#' + strInputID ).val( image.url );		// the url field is mandatory so  it does not have the suffix.
						jQuery( '#' + strInputID + '_id' ).val( image.id );				
						jQuery( '#' + strInputID + '_caption' ).val( jQuery( '<div/>' ).text( image.caption ).html() );				
						jQuery( '#' + strInputID + '_description' ).val( jQuery( '<div/>' ).text( image.description ).html() );				
						
					}
				}		
				
			});";} public function replyToGetInputStyles(){return "/* Media Uploader Button */
			.admin-page-framework-field-media input {
				margin-right: 0.5em;
			}
			.select_media.button.button-small {
				vertical-align: baseline;
			}		
		";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];$fMultipleFields=is_array($arrFields);$fRepeatable=$arrField['fRepeatable'];foreach(( array )$arrFields as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>".$this->getMediaInputTags($vValue,$arrField,$strFieldName,$strTagID,$strKey,$strLabel,$fMultipleFields,$arrDefaultKeys)."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-media' id='{$strTagID}'>".implode(PHP_EOL,$arrOutput)."</div>";} private function getMediaInputTags($vValue,$arrField,$strFieldName,$strTagID,$strKey,$strLabel,$fMultipleFields,$arrDefaultKeys){$intCountAttributes=count(( array )$arrField['arrCaptureAttributes']);$arrOutputs=array(($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":'')."<input id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."size='".$this->getCorrespondingArrayValue($arrField['vSize'],$strKey,$arrDefaultKeys['vSize'])."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."type='text' "."name='".($fMultipleFields?"{$strFieldName}[{$strKey}]":"{$strFieldName}").($intCountAttributes?"[url]":"")."' "."value='".($this->getMediaInputValue($vValue,$strKey,$fMultipleFields,$intCountAttributes?'url':'',$arrDefaultKeys))."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'')."/>");foreach(( array )$arrField['arrCaptureAttributes'] as $strAttribute)$arrOutputs[]="<input id='{$strTagID}_{$strKey}_{$strAttribute}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='hidden' "."name='".($fMultipleFields?"{$strFieldName}[{$strKey}]":"{$strFieldName}")."[{$strAttribute}]' "."value='".$this->getMediaInputValue($vValue,$strKey,$fMultipleFields,$strAttribute,$arrDefaultKeys)."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>";return "<div class='admin-page-framework-input-label-container admin-page-framework-input-container media-field'>"."<label for='{$strTagID}_{$strKey}' >".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).implode(PHP_EOL,$arrOutputs).PHP_EOL.$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>".$this->getMediaUploaderButtonScript("{$strTagID}_{$strKey}",$arrField['fRepeatable']?true:false,$arrField['fAllowExternalSource']?true:false);} private function getMediaInputValue($vValue,$strKey,$fMultipleFields,$strCaptureAttribute,$arrDefaultKeys){$vValue=$fMultipleFields?$this->getCorrespondingArrayValue($vValue,$strKey,$arrDefaultKeys['vDefault']):(isset($vValue)?$vValue:$arrDefaultKeys['vDefault']);return $strCaptureAttribute?(isset($vValue[$strCaptureAttribute])?$vValue[$strCaptureAttribute]:""):$vValue;} private function getMediaUploaderButtonScript($strInputID,$fRpeatable,$fExternalSource){$strButton="<a id='select_media_{$strInputID}' "."href='#' "."class='select_media button button-small'"."data-uploader_type='".(function_exists('wp_enqueue_media')?1:0)."'"."data-enable_external_source='".($fExternalSource?1:0)."'".">".$this->oMsg->___('select_file')."</a>";$strScript="
				if ( jQuery( 'a#select_media_{$strInputID}' ).length == 0 ) {
					jQuery( 'input#{$strInputID}' ).after( \"{$strButton}\" );
				}			
			".PHP_EOL;if(function_exists('wp_enqueue_media'))$strScript.="
					jQuery( document ).ready( function(){			
						setAPFMediaUploader( '{$strInputID}', '{$fRpeatable}', '{$fExternalSource}' );
					});".PHP_EOL;return "<script type='text/javascript'>".$strScript."</script>".PHP_EOL;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_select')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_select extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vSize'=>1,'vMultiple'=>false,'vWidth'=>'',);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];if(!is_array($arrField['vLabel']))return;$fSingle=($this->getArrayDimension(( array )$arrField['vLabel'])==1);$arrLabels=$fSingle?array($arrField['vLabel']):$arrField['vLabel'];foreach($arrLabels as $strKey=>$vLabel){$fMultiple=$this->getCorrespondingArrayValue($arrField['vMultiple'],$strKey,$arrDefaultKeys['vMultiple']);$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container admin-page-framework-select-label' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag'])."<span class='admin-page-framework-input-container'>"."<select id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='{$arrField['strType']}' ".($fMultiple?"multiple='Multiple' ":'')."name=".($fSingle?"'{$strFieldName}":"'{$strFieldName}[{$strKey}]").($fMultiple?"[]' ":"' ").($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."size=".($this->getCorrespondingArrayValue($arrField['vSize'],$strKey,$arrDefaultKeys['vSize']))." ".(($strWidth=$this->getCorrespondingArrayValue($arrField['vWidth'],$strKey,$arrDefaultKeys['vWidth']))?"style='width:{$strWidth};' ":"").">".$this->getOptionTags($vLabel,$vValue,$strTagID,$strKey,$fSingle,$fMultiple)."</select>"."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");}return "<div class='admin-page-framework-field-select' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function getOptionTags($arrLabels,$vValue,$strTagID,$strIterationID,$fSingle,$fMultiple=false){$arrOutput=array();foreach($arrLabels as $strKey=>$strLabel){$arrValue=$fSingle?( array )$vValue:( array )$this->getCorrespondingArrayValue($vValue,$strIterationID,array());$arrOutput[]="<option "."id='{$strTagID}_{$strIterationID}_{$strKey}' "."value='{$strKey}' ".($fMultiple?(in_array($strKey,$arrValue)?'selected="Selected"':''):($this->getCorrespondingArrayValue($vValue,$strIterationID,null)==$strKey?"selected='Selected'":"")).">".$strLabel."</option>";}return implode('',$arrOutput);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_radio')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_radio extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array();} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];if(!is_array($arrField['vLabel']))return;$fSingle=($this->getArrayDimension(( array )$arrField['vLabel'])==1);$arrLabels=$fSingle?array($arrField['vLabel']):$arrField['vLabel'];foreach($arrLabels as $strKey=>$vLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>".$this->getRadioTags($arrField,$vValue,$vLabel,$strFieldName,$strTagID,$strKey,$fSingle,$arrDefaultKeys)."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-radio' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function getRadioTags($arrField,$vValue,$arrLabels,$strFieldName,$strTagID,$strIterationID,$fSingle,$arrDefaultKeys){$arrOutput=array();foreach($arrLabels as $strKey=>$strLabel)$arrOutput[]="<div class='admin-page-framework-input-label-container admin-page-framework-radio-label' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<label for='{$strTagID}_{$strIterationID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag'])."<span class='admin-page-framework-input-container'>"."<input "."id='{$strTagID}_{$strIterationID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='radio' "."value='{$strKey}' "."name=".(!$fSingle?"'{$strFieldName}[{$strIterationID}]' ":"'{$strFieldName}' ").($this->getCorrespondingArrayValue($vValue,$strIterationID,null)==$strKey?'Checked ':'').($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>"."</span>"."<span class='admin-page-framework-input-label-string'>".$strLabel."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>";return implode('',$arrOutput);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_checkbox')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_checkbox extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array();} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];foreach(( array )$arrField['vLabel'] as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container admin-page-framework-checkbox-label' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag'])."<span class='admin-page-framework-input-container'>"."<input type='hidden' name=".(is_array($arrField['vLabel'])?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")." value='0' />"."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='{$arrField['strType']}' "."name=".(is_array($arrField['vLabel'])?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='1' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($vValue,$strKey,null)==1?"Checked ":'')."/>"."</span>"."<span class='admin-page-framework-input-label-string'>".$strLabel."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-checkbox' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_size')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_size extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vSizeUnits'=>array('px'=>'px','%'=>'%','em'=>'em','ex'=>'ex','in'=>'in','cm'=>'cm','mm'=>'mm','pt'=>'pt','pc'=>'pc',),'vSize'=>10,'vUnitSize'=>1,'vMaxLength'=>400,'vMin'=>null,'vMax'=>null,'vStep'=>null,'vMultiple'=>false,'vWidth'=>'',);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "/* Size Field Type */
		.admin-page-framework-field-size input {
			text-align: right;
		}
		.admin-page-framework-field-size select.size-field-select {
			vertical-align: 0px;			
		}
		".PHP_EOL;} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$fSingle=!is_array($arrField['vLabel']);$fIsSizeUnitForSingle=($this->getArrayDimension(( array )$arrField['vSizeUnits'])==1);$arrSizeUnits=isset($arrField['vSizeUnits'])&&is_array($arrField['vSizeUnits'])&&$fIsSizeUnitForSingle?$arrField['vSizeUnits']:$arrDefaultKeys['vSizeUnits'];foreach(( array )$arrField['vLabel'] as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).($strLabel?"<span class='admin-page-framework-input-label-container' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":"")."<input id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."size='".$this->getCorrespondingArrayValue($arrField['vSize'],$strKey,$arrDefaultKeys['vSize'])."' "."maxlength='".$this->getCorrespondingArrayValue($arrField['vMaxLength'],$strKey,$arrDefaultKeys['vMaxLength'])."' "."type='number' "."name=".($fSingle?"'{$strFieldName}[size]' ":"'{$strFieldName}[{$strKey}][size]' ")."value='".($fSingle?$this->getCorrespondingArrayValue($vValue['size'],$strKey,''):$this->getCorrespondingArrayValue($this->getCorrespondingArrayValue($vValue,$strKey,array()),'size',''))."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($arrField['vReadOnly'],$strKey)?"readonly='readonly' ":'')."min='".$this->getCorrespondingArrayValue($arrField['vMin'],$strKey,$arrDefaultKeys['vMin'])."' "."max='".$this->getCorrespondingArrayValue($arrField['vMax'],$strKey,$arrDefaultKeys['vMax'])."' "."step='".$this->getCorrespondingArrayValue($arrField['vStep'],$strKey,$arrDefaultKeys['vStep'])."' "."/>"."</label>"."<select id='{$strTagID}_{$strKey}' class='size-field-select'"."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='{$arrField['strType']}' ".(($fMultipleOptions=$this->getCorrespondingArrayValue($arrField['vMultiple'],$strKey,$arrDefaultKeys['vMultiple']))?"multiple='Multiple' ":'')."name=".($fSingle?"'{$strFieldName}[unit]":"'{$strFieldName}[{$strKey}][unit]").($fMultipleOptions?"[]' ":"' ").($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."size=".($this->getCorrespondingArrayValue($arrField['vUnitSize'],$strKey,$arrDefaultKeys['vUnitSize']))." ".(($strWidth=$this->getCorrespondingArrayValue($arrField['vWidth'],$strKey,$arrDefaultKeys['vWidth']))?"style='width:{$strWidth};' ":"").">".$this->getOptionTags($fSingle?$arrSizeUnits:$this->getCorrespondingArrayValue($arrField['vSizeUnits'],$strKey,$arrSizeUnits),$fSingle?$this->getCorrespondingArrayValue($vValue['unit'],$strKey,'px'):$this->getCorrespondingArrayValue($this->getCorrespondingArrayValue($vValue,$strKey,array()),'unit','px'),$strTagID,$strKey,true,$fMultipleOptions)."</select>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-size' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function getOptionTags($arrLabels,$vValue,$strTagID,$strIterationID,$fSingle,$fMultiple=false){$arrOutput=array();foreach($arrLabels as $strKey=>$strLabel){$arrValue=$fSingle?( array )$vValue:( array )$this->getCorrespondingArrayValue($vValue,$strIterationID,array());$arrOutput[]="<option "."id='{$strTagID}_{$strIterationID}_{$strKey}' "."value='{$strKey}' ".($fMultiple?(in_array($strKey,$arrValue)?'selected="Selected"':''):($this->getCorrespondingArrayValue($vValue,$strIterationID,null)==$strKey?"selected='Selected'":"")).">".$strLabel."</option>";}return implode('',$arrOutput);}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_hidden')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_hidden extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array();} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];foreach(( array )$vValue as $strKey=>$strValue)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).(($strLabel=$this->getCorrespondingArrayValue($arrField['vLabel'],$strKey,$arrDefaultKeys['vLabel']))?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>{$strLabel}</span>":"")."<div class='admin-page-framework-input-container'>"."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='{$arrField['strType']}' "."name=".(is_array($arrField['vLabel'])?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='".$strValue."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>"."</div>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-hidden' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_file')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_file extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vAcceptAttribute'=>'audio/*|video/*|image/*|MIME_type',);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrFields=$arrField['fRepeatable']?(empty($vValue)?array(''):( array )$vValue):$arrField['vLabel'];foreach(( array )$arrFields as $strKey=>$strLabel)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag']).($strLabel&&!$arrField['fRepeatable']?"<span class='admin-page-framework-input-label-string' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>".$strLabel."</span>":"")."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."accept='".$this->getCorrespondingArrayValue($arrField['vAcceptAttribute'],$strKey,$arrDefaultKeys['vAcceptAttribute'])."' "."type='{$arrField['strType']}' "."name=".(is_array($arrFields)?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='".$this->getCorrespondingArrayValue($arrFields,$strKey)."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-file' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_posttype')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_posttype extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('arrRemove'=>array('revision','attachment','nav_menu_item'),);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];foreach(( array )$this->getPostTypeArrayForChecklist($arrField['arrRemove']) as $strKey=>$strValue){$strName="{$strFieldName}[{$strKey}]";$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<div class='admin-page-framework-input-label-container' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<label for='{$strTagID}_{$strKey}'>".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag'])."<span class='admin-page-framework-input-container'>"."<input type='hidden' name='{$strName}' value='0' />"."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='checkbox' "."name='{$strName}'"."value='1' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'').($this->getCorrespondingArrayValue($vValue,$strKey,false)==1?"Checked ":'')."/>"."</span>"."<span class='admin-page-framework-input-label-string'>".$strValue."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</label>"."</div>"."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");}return "<div class='admin-page-framework-field-posttype' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function getPostTypeArrayForChecklist($arrRemoveNames,$arrPostTypes=array()){foreach(get_post_types('','objects') as $oPostType)if(isset($oPostType->name,$oPostType->label))$arrPostTypes[$oPostType->name]=$oPostType->label;return array_diff_key($arrPostTypes,array_flip($arrRemoveNames));}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_taxonomy')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_taxonomy extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vTaxonomySlug'=>'category','strHeight'=>'250px','strWidth'=>'100%',);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "
			jQuery( document ).ready( function() {
				jQuery( '.tab-box-container' ).each( function() {
					jQuery( this ).find( '.tab-box-tab' ).each( function( i ) {
						
						if ( i == 0 )
							jQuery( this ).addClass( 'active' );
							
						jQuery( this ).click( function( e ){
								 
							// Prevents jumping to the anchor which moves the scroll bar.
							e.preventDefault();
							
							// Remove the active tab and set the clicked tab to be active.
							jQuery( this ).siblings( 'li.active' ).removeClass( 'active' );
							jQuery( this ).addClass( 'active' );
							
							// Find the element id and select the content element with it.
							var thisTab = jQuery( this ).find( 'a' ).attr( 'href' );
							active_content = jQuery( this ).closest( '.tab-box-container' ).find( thisTab ).css( 'display', 'block' ); 
							active_content.siblings().css( 'display', 'none' );
							
						});
					});			
				});
			});
		";} public function replyToGetInputStyles(){return "/* Taxonomy Field Type */
			.admin-page-framework-field .taxonomy-checklist li { 
				margin: 8px 0 8px 20px; 
			}
			.admin-page-framework-field div.taxonomy-checklist {
				padding: 8px 0 8px 10px;
				margin-bottom: 20px;
			}
			.admin-page-framework-field .taxonomy-checklist ul {
				list-style-type: none;
				margin: 0;
			}
			.admin-page-framework-field .taxonomy-checklist ul ul {
				margin-left: 1em;
			}
			.admin-page-framework-field .taxonomy-checklist-label {
				/* margin-left: 0.5em; */
			}		
		/* Tabbed box */
			.admin-page-framework-field .tab-box-container.categorydiv {
				max-height: none;
			}
			.admin-page-framework-field .tab-box-tab-text {
				display: inline-block;
			}
			.admin-page-framework-field .tab-box-tabs {
				line-height: 12px;
				margin-bottom: 0;
			
			}
			.admin-page-framework-field .tab-box-tabs .tab-box-tab.active {
				display: inline;
				border-color: #dfdfdf #dfdfdf #fff;
				margin-bottom: 0;
				padding-bottom: 1px;
				background-color: #fff;
			}
			.admin-page-framework-field .tab-box-container { 
				position: relative; width: 100%; 

			}
			.admin-page-framework-field .tab-box-tabs li a { color: #333; text-decoration: none; }
			.admin-page-framework-field .tab-box-contents-container {  
				padding: 0 0 0 20px; 
				border: 1px solid #dfdfdf; 
				background-color: #fff;
			}
			.admin-page-framework-field .tab-box-contents { 
				overflow: hidden; 
				overflow-x: hidden; 
				position: relative; 
				top: -1px; 
				height: 300px;  
			}
			.admin-page-framework-field .tab-box-content { 
				height: 300px;
				display: none; 
				overflow: auto; 
				display: block; 
				position: relative; 
				overflow-x: hidden;
			}
			.admin-page-framework-field .tab-box-content:target, 
			.admin-page-framework-field .tab-box-content:target, 
			.admin-page-framework-field .tab-box-content:target { 
				display: block; 
			}			
		".PHP_EOL;} public function replyToGetInputIEStyles(){return ".tab-box-content { display: block; }
			.tab-box-contents { overflow: hidden;position: relative; }
			b { position: absolute; top: 0px; right: 0px; width:1px; height: 251px; overflow: hidden; text-indent: -9999px; }
		";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$arrTabs=array();$arrCheckboxes=array();foreach(( array )$arrField['vTaxonomySlug'] as $strKey=>$strTaxonomySlug){$strActive=isset($strActive)?'':'active';$arrTabs[]="<li class='tab-box-tab'>"."<a href='#tab-{$strKey}'>"."<span class='tab-box-tab-text'>".$this->getCorrespondingArrayValue(empty($arrField['vLabel'])?null:$arrField['vLabel'],$strKey,$this->getLabelFromTaxonomySlug($strTaxonomySlug))."</span>"."</a>"."</li>";$arrCheckboxes[]="<div id='tab-{$strKey}' class='tab-box-content' style='height: {$arrField['strHeight']};'>"."<ul class='list:category taxonomychecklist form-no-clear'>".wp_list_categories(array('walker'=>new AmazonAutoLinks_AdminPageFramework_WalkerTaxonomyChecklist,'name'=>is_array($arrField['vTaxonomySlug'])?"{$strFieldName}[{$strKey}]":"{$strFieldName}",'selected'=>$this->getSelectedKeyArray($vValue,$strKey),'title_li'=>'','hide_empty'=>0,'echo'=>false,'taxonomy'=>$strTaxonomySlug,'strTagID'=>$strTagID,))."</ul>"."<!--[if IE]><b>.</b><![endif]-->"."</div>";}$strTabs="<ul class='tab-box-tabs category-tabs'>".implode('',$arrTabs)."</ul>";$strContents="<div class='tab-box-contents-container'>"."<div class='tab-box-contents' style='height: {$arrField['strHeight']};'>".implode('',$arrCheckboxes)."</div>"."</div>";$strOutput="<div id='{$strTagID}' class='{$strFieldClassSelector} admin-page-framework-field-taxonomy tab-box-container categorydiv' style='max-width:{$arrField['strWidth']};'>".$strTabs.PHP_EOL.$strContents.PHP_EOL."</div>";return $strOutput;} private function getSelectedKeyArray($vValue,$strKey){$vValue=( array )$vValue;$intArrayDimension=$this->getArrayDimension(( array )$vValue);if($intArrayDimension==1)$arrKeys=$vValue;else if($intArrayDimension==2)$arrKeys=( array )$this->getCorrespondingArrayValue($vValue,$strKey,false);return array_keys($arrKeys,true);} private function getLabelFromTaxonomySlug($strTaxonomySlug){$oTaxonomy=get_taxonomy($strTaxonomySlug);return isset($oTaxonomy->label)?$oTaxonomy->label:null;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_submit')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_submit extends AmazonAutoLinks_AdminPageFramework_InputFieldTypeDefinition_Base{ protected function getDefaultKeys(){return array('vClassAttribute'=>'button button-primary','vRedirect'=>null,'vLink'=>null,'vReset'=>null,);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "/* Submit Buttons */
		.admin-page-framework-field input[type='submit'] {
			margin-bottom: 0.5em;
		}".PHP_EOL;} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$vValue=$this->getInputFieldValueFromLabel($arrField);$strFieldNameFlat=$this->getInputFieldNameFlat($arrField);foreach(( array )$vValue as $strKey=>$strValue){$strRedirectURL=$this->getCorrespondingArrayValue($arrField['vRedirect'],$strKey,$arrDefaultKeys['vRedirect']);$strLinkURL=$this->getCorrespondingArrayValue($arrField['vLink'],$strKey,$arrDefaultKeys['vLink']);$strResetKey=$this->getCorrespondingArrayValue($arrField['vReset'],$strKey,$arrDefaultKeys['vReset']);$fResetConfirmed=$this->checkConfirmationDisplayed($strResetKey,$strFieldNameFlat);$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<input type='hidden' "."name='__submit[{$strTagID}_{$strKey}][input_id]' "."value='{$strTagID}_{$strKey}' "."/>"."<input type='hidden' "."name='__submit[{$strTagID}_{$strKey}][field_id]' "."value='{$arrField['strFieldID']}' "."/>"."<input type='hidden' "."name='__submit[{$strTagID}_{$strKey}][name]' "."value='{$strFieldNameFlat}".(is_array($vValue)?"|{$strKey}'":"'")."/>".($strRedirectURL?"<input type='hidden' "."name='__redirect[{$strTagID}_{$strKey}][url]' "."value='".$strRedirectURL."' "."/>"."<input type='hidden' "."name='__redirect[{$strTagID}_{$strKey}][name]' "."value='{$strFieldNameFlat}".(is_array($vValue)?"|{$strKey}":"'")."/>":"").($strLinkURL?"<input type='hidden' "."name='__link[{$strTagID}_{$strKey}][url]' "."value='".$strLinkURL."' "."/>"."<input type='hidden' "."name='__link[{$strTagID}_{$strKey}][name]' "."value='{$strFieldNameFlat}".(is_array($vValue)?"|{$strKey}'":"'")."/>":"").($strResetKey&&!$fResetConfirmed?"<input type='hidden' "."name='__reset_confirm[{$strTagID}_{$strKey}][key]' "."value='".$strFieldNameFlat."' "."/>"."<input type='hidden' "."name='__reset_confirm[{$strTagID}_{$strKey}][name]' "."value='{$strFieldNameFlat}".(is_array($vValue)?"|{$strKey}'":"'")."/>":"").($strResetKey&&$fResetConfirmed?"<input type='hidden' "."name='__reset[{$strTagID}_{$strKey}][key]' "."value='".$strResetKey."' "."/>"."<input type='hidden' "."name='__reset[{$strTagID}_{$strKey}][name]' "."value='{$strFieldNameFlat}".(is_array($vValue)?"|{$strKey}'":"'")."/>":"").$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,$arrDefaultKeys['vBeforeInputTag'])."<span class='admin-page-framework-input-button-container admin-page-framework-input-container' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='{$arrField['strType']}' "."name=".(is_array($arrField['vLabel'])?"'{$strFieldName}[{$strKey}]' ":"'{$strFieldName}' ")."value='".$this->getCorrespondingArrayValue($vValue,$strKey,$this->oMsg->___('submit'))."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>"."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");}return "<div class='admin-page-framework-field-submit' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function checkConfirmationDisplayed($strResetKey,$strFlatFieldName){if(!$strResetKey)return false;$fResetConfirmed=get_transient(md5("reset_confirm_".$strFlatFieldName))!==false?true:false;if($fResetConfirmed)delete_transient(md5("reset_confirm_".$strFlatFieldName));return $fResetConfirmed;} protected function getInputFieldNameFlat($arrField){return isset($arrField['strOptionKey'])?"{$arrField['strOptionKey']}|{$arrField['strPageSlug']}|{$arrField['strSectionID']}|{$arrField['strFieldID']}":$arrField['strFieldID'];} protected function getInputFieldValueFromLabel($arrField){if(isset($arrField['vValue']))return $arrField['vValue'];if(isset($arrField['vLabel']))return $arrField['vLabel'];if(isset($arrField['vDefault']))return $arrField['vDefault'];}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_export')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_export extends AmazonAutoLinks_AdminPageFramework_InputFieldType_submit{ protected function getDefaultKeys(){return array('vExportData'=>null,'vExportFormat'=>'array','vExportFileName'=>null,'vClassAttribute'=>'button button-primary',);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$vValue=$this->getInputFieldValueFromLabel($arrField);if(isset($arrField['vExportData'])&&!is_array($vValue))set_transient(md5("{$arrField['strClassName']}_{$arrField['strFieldID']}"),$arrField['vExportData'],60*2);foreach(( array )$vValue as $strKey=>$strValue){$strExportFormat=$this->getCorrespondingArrayValue($arrField['vExportFormat'],$strKey,$arrDefaultKeys['vExportFormat']);$fIsDataSet=false;if(isset($vValue[$strKey])&&isset($arrField['vExportData'][$strKey])){set_transient(md5("{$arrField['strClassName']}_{$arrField['strFieldID']}_{$strKey}"),$arrField['vExportData'][$strKey],60*2);$fIsDataSet=true;}$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<input type='hidden' "."name='__export[{$arrField['strFieldID']}][input_id]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='{$strTagID}_{$strKey}' "."/>"."<input type='hidden' "."name='__export[{$arrField['strFieldID']}][field_id]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='{$arrField['strFieldID']}' "."/>"."<input type='hidden' "."name='__export[{$arrField['strFieldID']}][file_name]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$this->getCorrespondingArrayValue($arrField['vExportFileName'],$strKey,$this->generateExportFileName($arrField['strOptionKey'],$strExportFormat))."' />"."<input type='hidden' "."name='__export[{$arrField['strFieldID']}][format]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$strExportFormat."' />"."<input type='hidden' "."name='__export[{$arrField['strFieldID']}][transient]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".($fIsDataSet?1:0)."' />".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,'')."<span class='admin-page-framework-input-button-container admin-page-framework-input-container' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='submit' "."name='__export[submit][{$arrField['strFieldID']}]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$this->getCorrespondingArrayValue($vValue,$strKey,$this->oMsg->___('export_options'))."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>"."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,$arrDefaultKeys['vAfterInputTag'])."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");}return "<div class='admin-page-framework-field-export' id='{$strTagID}'>".implode('',$arrOutput)."</div>";} private function generateExportFileName($strOptionKey,$strExportFormat='text'){switch(trim(strtolower($strExportFormat))){case 'text':$strExt="txt";break;case 'json':$strExt="json";break;case 'array':default:$strExt="txt";break;}return $strOptionKey.'_'.date("Ymd").'.'.$strExt;}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputFieldType_import')):class AmazonAutoLinks_AdminPageFramework_InputFieldType_import extends AmazonAutoLinks_AdminPageFramework_InputFieldType_submit{ protected function getDefaultKeys(){return array('vClassAttribute'=>'import button button-primary','vAcceptAttribute'=>'audio/*|video/*|image/*|MIME_type','vClassAttributeUpload'=>'import','vImportOptionKey'=>null,'vImportFormat'=>'array','vMerge'=>false,);} public function replyToFieldLoader(){} public function replyToGetInputScripts(){return "";} public function replyToGetInputStyles(){return "";} public function replyToGetInputField($vValue,$arrField,$arrOptions,$arrErrors,$arrFieldDefinition){$arrOutput=array();$strFieldName=$arrField['strFieldName'];$strTagID=$arrField['strTagID'];$strFieldClassSelector=$arrField['strFieldClassSelector'];$arrDefaultKeys=$arrFieldDefinition['arrDefaultKeys'];$vValue=$this->getInputFieldValueFromLabel($arrField);$strFieldNameFlat=$this->getInputFieldNameFlat($arrField);foreach(( array )$vValue as $strKey=>$strValue)$arrOutput[]="<div class='{$strFieldClassSelector}' id='field-{$strTagID}_{$strKey}'>"."<input type='hidden' "."name='__import[{$arrField['strFieldID']}][input_id]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='{$strTagID}_{$strKey}' "."/>"."<input type='hidden' "."name='__import[{$arrField['strFieldID']}][field_id]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='{$arrField['strFieldID']}' "."/>"."<input type='hidden' "."name='__import[{$arrField['strFieldID']}][do_merge]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$this->getCorrespondingArrayValue($arrField['vMerge'],$strKey,$arrDefaultKeys['vMerge'])."' "."/>"."<input type='hidden' "."name='__import[{$arrField['strFieldID']}][import_option_key]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$this->getCorrespondingArrayValue($arrField['vImportOptionKey'],$strKey,$arrField['strOptionKey'])."' />"."<input type='hidden' "."name='__import[{$arrField['strFieldID']}][format]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$this->getCorrespondingArrayValue($arrField['vImportFormat'],$strKey,$arrDefaultKeys['vImportFormat'])."' />".$this->getCorrespondingArrayValue($arrField['vBeforeInputTag'],$strKey,'')."<span class='admin-page-framework-input-button-container admin-page-framework-input-container' style='min-width:".$this->getCorrespondingArrayValue($arrField['vLabelMinWidth'],$strKey,$arrDefaultKeys['vLabelMinWidth'])."px;'>"."<input "."id='{$strTagID}_{$strKey}_file' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttributeUpload'],$strKey,$arrDefaultKeys['vClassAttributeUpload'])."' "."accept='".$this->getCorrespondingArrayValue($arrField['vAcceptAttribute'],$strKey,$arrDefaultKeys['vAcceptAttribute'])."' "."type='file' "."name='__import[{$arrField['strFieldID']}]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ").($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>"."<input "."id='{$strTagID}_{$strKey}' "."class='".$this->getCorrespondingArrayValue($arrField['vClassAttribute'],$strKey,$arrDefaultKeys['vClassAttribute'])."' "."type='submit' "."name='__import[submit][{$arrField['strFieldID']}]".(is_array($arrField['vLabel'])?"[{$strKey}]' ":"' ")."value='".$this->getCorrespondingArrayValue($vValue,$strKey,$this->oMsg->___('import_options'),true)."' ".($this->getCorrespondingArrayValue($arrField['vDisable'],$strKey)?"disabled='Disabled' ":'')."/>"."</span>".$this->getCorrespondingArrayValue($arrField['vAfterInputTag'],$strKey,'')."</div>".(($strDelimiter=$this->getCorrespondingArrayValue($arrField['vDelimiter'],$strKey,$arrDefaultKeys['vDelimiter'],true))?"<div class='delimiter' id='delimiter-{$strTagID}_{$strKey}'>".$strDelimiter."</div>":"");return "<div class='admin-page-framework-field-import' id='{$strTagID}'>".implode('',$arrOutput)."</div>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_BuiltinInputFieldTypeDefinitions')):class AmazonAutoLinks_AdminPageFramework_BuiltinInputFieldTypeDefinitions{ protected static $arrDefaultFieldTypeSlugs=array('default','text','number','textarea','radio','checkbox','select','hidden','file','submit','import','export','image','media','color','taxonomy','posttype','size',);function __construct(&$arrFieldTypeDefinitions,$strExtendedClassName,$oMsg){foreach(self::$arrDefaultFieldTypeSlugs as $strFieldTypeSlug){$strInstantiatingClassName="AmazonAutoLinks_AdminPageFramework_InputFieldType_{$strFieldTypeSlug}";if(class_exists($strInstantiatingClassName)){$oFieldType=new $strInstantiatingClassName($strExtendedClassName,$strFieldTypeSlug,$oMsg,false);$arrFieldTypeDefinitions[$strFieldTypeSlug]=$oFieldType->getDefinitionArray();}}}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_InputField')):class AmazonAutoLinks_AdminPageFramework_InputField extends AmazonAutoLinks_AdminPageFramework_Utilities{ private $fIsMetaBox=false; protected static $arrStructure_FieldDefinition=array('callRenderField'=>null,'callGetScripts'=>null,'callGetStyles'=>null,'callGetIEStyles'=>null,'callFieldLoader'=>null,'arrEnqueueScripts'=>null,'arrEnqueueStyles'=>null,'arrDefaultKeys'=>null,); public function __construct(&$arrField,&$arrOptions,$arrErrors,&$arrFieldDefinition,&$oMsg){$this->arrField=$arrField+$arrFieldDefinition['arrDefaultKeys']+self::$arrStructure_FieldDefinition;$this->arrFieldDefinition=$arrFieldDefinition;$this->arrOptions=$arrOptions;$this->arrErrors=$arrErrors?$arrErrors:array();$this->oMsg=$oMsg;$this->strFieldName=$this->getInputFieldName();$this->strTagID=$this->getInputTagID($arrField);$this->vValue=$this->getInputFieldValue($arrField,$arrOptions);$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags']=isset($GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'])?$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags']:array();} private function getInputFieldName($arrField=null){$arrField=isset($arrField)?$arrField:$this->arrField;if(!empty($arrField['strName']))return $arrField['strName'];return isset($arrField['strOptionKey'])?"{$arrField['strOptionKey']}[{$arrField['strPageSlug']}][{$arrField['strSectionID']}][{$arrField['strFieldID']}]":$arrField['strFieldID'];} private function getInputFieldValue(&$arrField,$arrOptions){if(isset($arrField['vValue']))return $arrField['vValue'];if(isset($arrField['strPageSlug'],$arrField['strSectionID'])){$vValue=$this->getInputFieldValueFromOptionTable($arrField,$arrOptions);if($vValue!='')return $vValue;}else if(isset($_GET['action'],$_GET['post'])){$vValue=$this->getInputFieldValueFromPostTable($_GET['post'],$arrField);if($vValue!='')return $vValue;}if(isset($arrField['vDefault']))return $arrField['vDefault'];} private function getInputFieldValueFromOptionTable(&$arrField,&$arrOptions){if(!isset($arrOptions[$arrField['strPageSlug']][$arrField['strSectionID']][$arrField['strFieldID']]))return;$vValue=$arrOptions[$arrField['strPageSlug']][$arrField['strSectionID']][$arrField['strFieldID']];if(!is_array($vValue)&&!is_object($vValue))return $vValue;$vDefault=isset($arrField['vDefault'])?$arrField['vDefault']:array();foreach($vValue as $strKey=>&$strElement)if($strElement=='')$strElement=$this->getCorrespondingArrayValue($vDefault,$strKey,'');return $vValue;} private function getInputFieldValueFromPostTable($intPostID,&$arrField){$vValue=get_post_meta($intPostID,$arrField['strFieldID'],true);if(!is_array($vValue)&&!is_object($vValue))return $vValue;$vDefault=isset($arrField['vDefault'])?$arrField['vDefault']:array();foreach($vValue as $strKey=>&$strElement)if($strElement=='')$strElement=$this->getCorrespondingArrayValue($vDefault,$strKey,'');return $vValue;} private function getInputTagID($arrField){if(isset($arrField['strSectionID'],$arrField['strFieldID']))return "{$arrField['strSectionID']}_{$arrField['strFieldID']}";if(isset($arrField['strFieldID']))return $arrField['strFieldID'];if(isset($arrField['strName']))return $arrField['strName'];return '';} public function getInputField($strFieldType){$strOutput=isset($this->arrErrors[$this->arrField['strSectionID']][$this->arrField['strFieldID']])?"<span style='color:red;'>*&nbsp;{$this->arrField['strError']}".$this->arrErrors[$this->arrField['strSectionID']][$this->arrField['strFieldID']]."</span><br />":'';$this->strFieldClassSelector=$this->arrField['fRepeatable']?"admin-page-framework-field repeatable":"admin-page-framework-field";$this->arrField['strFieldName']=$this->strFieldName;$this->arrField['strTagID']=$this->strTagID;$this->arrField['strFieldClassSelector']=$this->strFieldClassSelector;$strOutput.=call_user_func_array($this->arrFieldDefinition['callRenderField'],array($this->vValue,$this->arrField,$this->arrOptions,$this->arrErrors,$this->arrFieldDefinition));$strOutput.=(isset($this->arrField['strDescription'])&&trim($this->arrField['strDescription'])!='')?"<p class='admin-page-framework-fields-description'><span class='description'>{$this->arrField['strDescription']}</span></p>":'';$strOutput.=$this->arrField['fRepeatable']?$this->getRepeaterScript($this->strTagID,count(( array )$this->vValue)):'';return $this->getRepeaterScriptGlobal($this->strTagID)."<fieldset>"."<div class='admin-page-framework-fields'>".$this->arrField['strBeforeField'].$strOutput.$this->arrField['strAfterField']."</div>"."</fieldset>";} public function isMetaBox($fTrueOrFalse=null){if(isset($fTrueOrFalse))$this->fIsMetaBox=$fTrueOrFalse;return $this->fIsMetaBox;} private $fIsRepeatableScriptCalled=false; private function getRepeaterScript($strTagID,$intFieldCount){$strAdd=$this->oMsg->___('add');$strRemove=$this->oMsg->___('remove');$strVisibility=$intFieldCount<=1?" style='display:none;'":"";$strButtons="<div class='admin-page-framework-repeatable-field-buttons'>"."<a class='repeatable-field-add button-secondary repeatable-field-button button button-small' href='#' title='{$strAdd}' data-id='{$strTagID}'>+</a>"."<a class='repeatable-field-remove button-secondary repeatable-field-button button button-small' href='#' title='{$strRemove}' {$strVisibility} data-id='{$strTagID}'>-</a>"."</div>";return "<script type='text/javascript'>
				jQuery( document ).ready( function() {
				
					// Adds the buttons
					jQuery( '#{$strTagID} .admin-page-framework-field' ).append( \"{$strButtons}\" );
					
					// Update the fields
					updateAPFRepeatableFields( '{$strTagID}' );
					
				});
			</script>";} private function getRepeaterScriptGlobal($strID){if($this->fIsRepeatableScriptCalled)return '';$this->fIsRepeatableScriptCalled=true;return "<script type='text/javascript'>
			jQuery( document ).ready( function() {
				
				// Global function literals
				
				// This function modifies the ids and names of the tags of input, textarea, and relevant tags for repeatable fields.
				updateAPFIDsAndNames = function( element, fIncrementOrDecrement ) {

					var updateID = function( index, name ) {
						
						if ( typeof name === 'undefined' ) {
							return name;
						}
						return name.replace( /_((\d+))(?=(_|$))/, function ( fullMatch, n ) {						
							return '_' + ( Number(n) + ( fIncrementOrDecrement == 1 ? 1 : -1 ) );
						});
						
					}
					var updateName = function( index, name ) {
						
						if ( typeof name === 'undefined' ) {
							return name;
						}
						return name.replace( /\[((\d+))(?=\])/, function ( fullMatch, n ) {				
							return '[' + ( Number(n) + ( fIncrementOrDecrement == 1 ? 1 : -1 ) );
						});
						
					}					
				
					element.attr( 'id', function( index, name ) { return updateID( index, name ) } );
					element.find( 'input,textarea' ).attr( 'id', function( index, name ){ return updateID( index, name ) } );
					element.find( 'input,textarea' ).attr( 'name', function( index, name ){ return updateName( index, name ) } );
					
					// Color Pickers
					var nodeColorInput = element.find( 'input.input_color' );
					if ( nodeColorInput.length > 0 ) {
						
							var previous_id = nodeColorInput.attr( 'id' );
							
							if ( fIncrementOrDecrement > 0 ) {	// Add
					
								// For WP 3.5+
								var nodeNewColorInput = nodeColorInput.clone();	// re-clone without bind events.
								
								// For WP 3.4.x or below
								var strInputValue = nodeNewColorInput.val() ? nodeNewColorInput.val() : 'transparent';
								var strInputStyle = strInputValue != 'transparent' && nodeNewColorInput.attr( 'style' ) ? nodeNewColorInput.attr( 'style' ) : '';
								
								nodeNewColorInput.val( strInputValue );	// set the default value	
								nodeNewColorInput.attr( 'style', strInputStyle );	// remove the background color set to the input field ( for WP 3.4.x or below )						 
								
								var nodeFarbtastic = element.find( '.colorpicker' );
								var nodeNewFarbtastic = nodeFarbtastic.clone();	// re-clone without bind elements.
								
								// Remove the old elements
								nodeIris = jQuery( '#' + previous_id ).closest( '.wp-picker-container' );	
								if ( nodeIris.length > 0 ) {	// WP 3.5+
									nodeIris.remove();	
								} else {
									jQuery( '#' + previous_id ).remove();	// WP 3.4.x or below
									element.find( '.colorpicker' ).remove();	// WP 3.4.x or below
								}
							
								// Add the new elements
								element.prepend( nodeNewFarbtastic );
								element.prepend( nodeNewColorInput );
								
							}
							
							element.find( '.colorpicker' ).attr( 'id', function( index, name ){ return updateID( index, name ) } );
							element.find( '.colorpicker' ).attr( 'rel', function( index, name ){ return updateID( index, name ) } );					

							// Renew the color picker script
							var cloned_id = element.find( 'input.input_color' ).attr( 'id' );
							registerAPFColorPickerField( cloned_id );					
					
					}

					// Image uploader buttons and image preview elements
					image_uploader_button = element.find( '.select_image' );
					if ( image_uploader_button.length > 0 ) {
						var previous_id = element.find( '.image-field input' ).attr( 'id' );
						image_uploader_button.attr( 'id', function( index, name ){ return updateID( index, name ) } );
						element.find( '.image_preview' ).attr( 'id', function( index, name ){ return updateID( index, name ) } );
						element.find( '.image_preview img' ).attr( 'id', function( index, name ){ return updateID( index, name ) } );
					
						if ( jQuery( image_uploader_button ).data( 'uploader_type' ) == '1' ) {	// for Wordpress 3.5 or above
							var fExternalSource = jQuery( image_uploader_button ).attr( 'data-enable_external_source' );
							setAPFImageUploader( previous_id, true, fExternalSource );	
						}						
					}
					
					// Media uploader buttons
					media_uploader_button = element.find( '.select_media' );
					if ( media_uploader_button.length > 0 ) {
						var previous_id = element.find( '.media-field input' ).attr( 'id' );
						media_uploader_button.attr( 'id', function( index, name ){ return updateID( index, name ) } );
					
						if ( jQuery( media_uploader_button ).data( 'uploader_type' ) == '1' ) {	// for Wordpress 3.5 or above
							var fExternalSource = jQuery( media_uploader_button ).attr( 'data-enable_external_source' );
							setAPFMediaUploader( previous_id, true, fExternalSource );	
						}						
					}
					
					// Date pickers - somehow it needs to destroy the both previous one and the added one and assign the new date pickers 
					var date_picker_script = element.find( 'script.date-picker-enabler-script' );
					if ( date_picker_script.length > 0 ) {
						var previous_id = date_picker_script.attr( 'data-id' );
						date_picker_script.attr( 'data-id', function( index, name ){ return updateID( index, name ) } );

						jQuery( '#' + date_picker_script.attr( 'data-id' ) ).datepicker( 'destroy' ); 
						jQuery( '#' + date_picker_script.attr( 'data-id' ) ).datepicker({
							dateFormat : date_picker_script.attr( 'data-date_format' )
						});						
						jQuery( '#' + previous_id ).datepicker( 'destroy' ); //here
						jQuery( '#' + previous_id ).datepicker({
							dateFormat : date_picker_script.attr( 'data-date_format' )
						});												
					}				
									
				}
				
				// This function is called from the updateAPFRepeatableFields() and from the media uploader for multiple file selections.
				addAPFRepeatableField = function( strFieldContainerID ) {	

					var field_container = jQuery( '#' + strFieldContainerID );
					var field_delimiter_id = strFieldContainerID.replace( 'field-', 'delimiter-' );
					var field_delimiter = field_container.siblings( '#' + field_delimiter_id );
					
					var field_new = field_container.clone( true );
					var delimiter_new = field_delimiter.clone( true );
					var target_element = ( jQuery( field_delimiter ).length ) ? field_delimiter : field_container;
			
					field_new.find( 'input,textarea' ).val( '' );	// empty the value		
					field_new.find( '.image_preview' ).hide();					// for the image field type, hide the preview element
					field_new.find( '.image_preview img' ).attr( 'src', '' );	// for the image field type, empty the src property for the image uploader field
					delimiter_new.insertAfter( target_element );	// add the delimiter
					field_new.insertAfter( target_element );		// add the cloned new field element

					// Increment the names and ids of the next following siblings.
					target_element.nextAll().each( function() {
						updateAPFIDsAndNames( jQuery( this ), true );
					});

					var remove_buttons =  field_container.closest( '.admin-page-framework-fields' ).find( '.repeatable-field-remove' );
					if ( remove_buttons.length > 1 ) 
						remove_buttons.show();				
					
					// Return the newly created element
					return field_new;
					
				}
				
				updateAPFRepeatableFields = function( strID ) {
				
					// Add button behaviour
					jQuery( '#' + strID + ' .repeatable-field-add' ).click( function() {
						
						var field_container = jQuery( this ).closest( '.admin-page-framework-field' );
						addAPFRepeatableField( field_container.attr( 'id' ) );
						return false;
						
					});		
					
					// Remove button behaviour
					jQuery( '#' + strID + ' .repeatable-field-remove' ).click( function() {
						
						// Need to remove two elements: the field container and the delimiter element.
						var field_container = jQuery( this ).closest( '.admin-page-framework-field' );
						var field_container_id = field_container.attr( 'id' );				
						var field_delimiter_id = field_container_id.replace( 'field-', 'delimiter-' );
						var field_delimiter = field_container.siblings( '#' + field_delimiter_id );
						var target_element = ( jQuery( field_delimiter ).length ) ? field_delimiter : field_container;

						// Decrement the names and ids of the next following siblings.
						target_element.nextAll().each( function() {
							updateAPFIDsAndNames( jQuery( this ), false );	// the second parameter value indicates it's for decrement.
						});

						field_delimiter.remove();
						field_container.remove();
						
						var fieldsCount = jQuery( '#' + strID + ' .repeatable-field-remove' ).length;
						if ( fieldsCount == 1 ) {
							jQuery( '#' + strID + ' .repeatable-field-remove' ).css( 'display', 'none' );
						}
						return false;
					});
									
				}
			});
		</script>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_WalkerTaxonomyChecklist')):class AmazonAutoLinks_AdminPageFramework_WalkerTaxonomyChecklist extends Walker_Category{function start_el(&$strOutput,$oCategory,$intDepth=0,$arrArgs=array(),$intCurrentObjectID=0){$arrArgs=$arrArgs+array('name'=>null,'disabled'=>null,'selected'=>array(),'strTagID'=>null,);$intID=$oCategory->term_id;$strTaxonomy=empty($arrArgs['taxonomy'])?'category':$arrArgs['taxonomy'];$strChecked=in_array($intID,( array )$arrArgs['selected'])?'Checked':'';$strDisabled=$arrArgs['disabled']?'disabled="Disabled"':'';$strClass='category-list';$strID="{$arrArgs['strTagID']}_{$strTaxonomy}_{$intID}";$strOutput.="\n"."<li id='list-{$strID}' $strClass>"."<label for='{$strID}' class='taxonomy-checklist-label'>"."<input value='0' type='hidden' name='{$arrArgs['name']}[{$intID}]' />"."<input id='{$strID}' value='1' type='checkbox' name='{$arrArgs['name']}[{$intID}]' {$strChecked} {$strDisabled} />".esc_html(apply_filters('the_category',$oCategory->name))."</label>";}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_PostType')):abstract class AmazonAutoLinks_AdminPageFramework_PostType{ protected $oUtil; protected $oLink; public function __construct($strPostType,$arrArgs=array(),$strCallerPath=null,$strTextDomain='admin-page-framework'){$this->oUtil=new AmazonAutoLinks_AdminPageFramework_Utilities;$this->oProps=new AmazonAutoLinks_AdminPageFramework_PostType_Properties($this);$this->oMsg=AmazonAutoLinks_AdminPageFramework_Messages::instantiate($strTextDomain);$this->oProps->strPostType=$this->oUtil->sanitizeSlug($strPostType);$this->oProps->arrPostTypeArgs=$arrArgs;$this->oProps->strClassName=get_class($this);$this->oProps->strClassHash=md5($this->oProps->strClassName);$this->oProps->arrColumnHeaders=array('cb'=>'<input type="checkbox" />','title'=>$this->oMsg->___('title'),'author'=>$this->oMsg->___('author'),'comments'=>'<div class="comment-grey-bubble"></div>','date'=>$this->oMsg->___('date'),);$this->oProps->strCallerPath=$strCallerPath;add_action('init',array($this,'registerPostType'),999);if($this->oProps->strPostType!=''&&is_admin()){add_action('admin_enqueue_scripts',array($this,'disableAutoSave'));add_filter("manage_{$this->oProps->strPostType}_posts_columns",array($this,'setColumnHeader'));add_filter("manage_edit-{$this->oProps->strPostType}_sortable_columns",array($this,'setSortableColumns'));add_action("manage_{$this->oProps->strPostType}_posts_custom_column",array($this,'setColumnCell'),10,2);add_action('restrict_manage_posts',array($this,'addAuthorTableFilter'));add_action('restrict_manage_posts',array($this,'addTaxonomyTableFilter'));add_filter('parse_query',array($this,'setTableFilterQuery'));add_action('admin_head',array($this,'addStyle'));$this->oLink=new AmazonAutoLinks_AdminPageFramework_LinkForPostType($this->oProps->strPostType,$this->oProps->strCallerPath,$this->oMsg);add_action('wp_loaded',array($this,'setUp'));}$this->oUtil->addAndDoAction($this,"{$this->oProps->strPrefix_Start}{$this->oProps->strClassName}");} public function setUp(){} public function setColumnHeader($arrColumnHeaders){return $this->oProps->arrColumnHeaders;} public function setSortableColumns($arrColumns){return $this->oProps->arrColumnSortable;} protected function setAutoSave($fEnableAutoSave=True){$this->oProps->fEnableAutoSave=$fEnableAutoSave;} protected function addTaxonomy($strTaxonomySlug,$arrArgs){$strTaxonomySlug=$this->oUtil->sanitizeSlug($strTaxonomySlug);$this->oProps->arrTaxonomies[$strTaxonomySlug]=$arrArgs;if(isset($arrArgs['show_table_filter'])&&$arrArgs['show_table_filter'])$this->oProps->arrTaxonomyTableFilters[]=$strTaxonomySlug;if(isset($arrArgs['show_in_sidebar_menus'])&&!$arrArgs['show_in_sidebar_menus'])$this->oProps->arrTaxonomyRemoveSubmenuPages["edit-tags.php?taxonomy={$strTaxonomySlug}&amp;post_type={$this->oProps->strPostType}"]="edit.php?post_type={$this->oProps->strPostType}";if(count($this->oProps->arrTaxonomyTableFilters)==1)add_action('init',array($this,'registerTaxonomies'));if(count($this->oProps->arrTaxonomyRemoveSubmenuPages)==1)add_action('admin_menu',array($this,'removeTexonomySubmenuPages'),999);} protected function setAuthorTableFilter($fEnableAuthorTableFileter=false){$this->oProps->fEnableAuthorTableFileter=$fEnableAuthorTableFileter;} protected function setPostTypeArgs($arrArgs){$this->oProps->arrPostTypeArgs=$arrArgs;} protected function setFooterInfoLeft($strHTML,$fAppend=true){if(isset($this->oLink))$this->oLink->arrFooterInfo['strLeft']=$fAppend?$this->oLink->arrFooterInfo['strLeft'].$strHTML:$strHTML;} protected function setFooterInfoRight($strHTML,$fAppend=true){if(isset($this->oLink))$this->oLink->arrFooterInfo['strRight']=$fAppend?$this->oLink->arrFooterInfo['strRight'].$strHTML:$strHTML;} private function getStylesForPostTypeScreenIcon($strSRC){$strNone='none';$strSRC=$this->oUtil->resolveSRC($strSRC);return "#post-body-content {
				margin-bottom: 10px;
			}
			#edit-slug-box {
				display: {$strNone};
			}
			#icon-edit.icon32.icon32-posts-".$this->oProps->strPostType." {
				background: url('".$strSRC."') no-repeat;
				background-size: 32px 32px;
			}			
		";} public function addStyle(){if(!isset($_GET['post_type'])||$_GET['post_type']!=$this->oProps->strPostType)return;if(isset($this->oProps->arrPostTypeArgs['screen_icon'])&&$this->oProps->arrPostTypeArgs['screen_icon'])$this->oProps->strStyle=$this->getStylesForPostTypeScreenIcon($this->oProps->arrPostTypeArgs['screen_icon']);$this->oProps->strStyle=$this->oUtil->addAndApplyFilters($this,"style_{$this->oProps->strClassName}",$this->oProps->strStyle);if(!empty($this->oProps->strStyle))echo "<style type='text/css' id='admin-page-framework-style-post-type'>".$this->oProps->strStyle."</style>";} public function registerPostType(){register_post_type($this->oProps->strPostType,$this->oProps->arrPostTypeArgs);$bIsPostTypeSet=get_option("post_type_rules_flased_{$this->oProps->strPostType}");if($bIsPostTypeSet!==true){flush_rewrite_rules(false);update_option("post_type_rules_flased_{$this->oProps->strPostType}",true);}} public function registerTaxonomies(){foreach($this->oProps->arrTaxonomies as $strTaxonomySlug=>$arrArgs)register_taxonomy($strTaxonomySlug,$this->oProps->strPostType,$arrArgs);} public function removeTexonomySubmenuPages(){foreach($this->oProps->arrTaxonomyRemoveSubmenuPages as $strSubmenuPageSlug=>$strTopLevelPageSlug)remove_submenu_page($strTopLevelPageSlug,$strSubmenuPageSlug);} public function disableAutoSave(){if($this->oProps->fEnableAutoSave)return;if($this->oProps->strPostType!=get_post_type())return;wp_dequeue_script('autosave');} public function addAuthorTableFilter(){if(!$this->oProps->fEnableAuthorTableFileter)return;if(!(isset($_GET['post_type'])&&post_type_exists($_GET['post_type'])&&in_array(strtolower($_GET['post_type']),array($this->oProps->strPostType))))return;wp_dropdown_users(array('show_option_all'=>'Show all Authors','show_option_none'=>false,'name'=>'author','selected'=>!empty($_GET['author'])?$_GET['author']:0,'include_selected'=>false));} public function addTaxonomyTableFilter(){if($GLOBALS['typenow']!=$this->oProps->strPostType)return;$oPostCount=wp_count_posts($this->oProps->strPostType);if($oPostCount->publish+$oPostCount->future+$oPostCount->draft+$oPostCount->pending+$oPostCount->private+$oPostCount->trash==0)return;foreach(get_object_taxonomies($GLOBALS['typenow']) as $strTaxonomySulg){if(!in_array($strTaxonomySulg,$this->oProps->arrTaxonomyTableFilters))continue;$oTaxonomy=get_taxonomy($strTaxonomySulg);if(wp_count_terms($oTaxonomy->name)==0)continue;wp_dropdown_categories(array('show_option_all'=>$this->oMsg->___('show_all').' '.$oTaxonomy->label,'taxonomy'=>$strTaxonomySulg,'name'=>$oTaxonomy->name,'orderby'=>'name','selected'=>intval(isset($_GET[$strTaxonomySulg])),'hierarchical'=>$oTaxonomy->hierarchical,'show_count'=>true,'hide_empty'=>false,'hide_if_empty'=>false,'echo'=>true,));}} public function setTableFilterQuery($oQuery=null){if('edit.php'!=$GLOBALS['pagenow'])return $oQuery;if(!isset($GLOBALS['typenow']))return $oQuery;foreach(get_object_taxonomies($GLOBALS['typenow']) as $strTaxonomySlug){if(!in_array($strTaxonomySlug,$this->oProps->arrTaxonomyTableFilters))continue;$strVar=&$oQuery->query_vars[$strTaxonomySlug];if(!isset($strVar))continue;$oTerm=get_term_by('id',$strVar,$strTaxonomySlug);if(is_object($oTerm))$strVar=$oTerm->slug;}return $oQuery;} public function setColumnCell($strColumnTitle,$intPostID){echo $this->oUtil->addAndApplyFilter($this,"{$this->oProps->strPrefix_Cell}{$this->oProps->strPostType}_{$strColumnTitle}",$strCell='',$intPostID);} public function __call($strMethodName,$arrArgs=null){if(substr($strMethodName,0,strlen($this->oProps->strPrefix_Cell))==$this->oProps->strPrefix_Cell)return $arrArgs[0];if(substr($strMethodName,0,strlen("style_"))=="style_")return $arrArgs[0];}}endif;if(!class_exists('AmazonAutoLinks_AdminPageFramework_MetaBox')):abstract class AmazonAutoLinks_AdminPageFramework_MetaBox extends AmazonAutoLinks_AdminPageFramework_MetaBox_Help{ protected $oDebug; protected $oUtil; protected $oMsg; protected $oHeadTag;function __construct($strMetaBoxID,$strTitle,$vPostTypes=array('post'),$strContext='normal',$strPriority='default',$strCapability='edit_posts',$strTextDomain='admin-page-framework'){$this->oUtil=new AmazonAutoLinks_AdminPageFramework_Utilities;$this->oMsg=AmazonAutoLinks_AdminPageFramework_Messages::instantiate($strTextDomain);$this->oDebug=new AmazonAutoLinks_AdminPageFramework_Debug;$this->oProps=new AmazonAutoLinks_AdminPageFramework_MetaBox_Properties($this);$this->oHeadTag=new AmazonAutoLinks_AdminPageFramework_HeadTag_MetaBox($this->oProps);$this->oProps->strMetaBoxID=$this->oUtil->sanitizeSlug($strMetaBoxID);$this->oProps->strTitle=$strTitle;$this->oProps->arrPostTypes=is_string($vPostTypes)?array($vPostTypes):$vPostTypes;$this->oProps->strContext=$strContext;$this->oProps->strPriority=$strPriority;$this->oProps->strClassName=get_class($this);$this->oProps->strClassHash=md5($this->oProps->strClassName);$this->oProps->strCapability=$strCapability;if(is_admin()){add_action('wp_loaded',array($this,'replyToLoadDefaultFieldTypeDefinitions'),10);add_action('wp_loaded',array($this,'setUp'),11);add_action('add_meta_boxes',array($this,'addMetaBox'));add_action('save_post',array($this,'saveMetaBoxFields'));add_action("load-{$GLOBALS['pagenow']}",array($this,'registerHelpTabTextForMetaBox'),20);if(in_array($GLOBALS['pagenow'],array('media-upload.php','async-upload.php',)))add_filter('gettext',array($this,'replaceThickBoxText'),1,2);}$this->oUtil->addAndDoAction($this,"{$this->oProps->strPrefixStart}{$this->oProps->strClassName}");} public function replyToLoadDefaultFieldTypeDefinitions(){new AmazonAutoLinks_AdminPageFramework_BuiltinInputFieldTypeDefinitions($this->oProps->arrFieldTypeDefinitions,$this->oProps->strClassName,$this->oMsg);$this->oProps->arrFieldTypeDefinitions=$this->oUtil->addAndApplyFilter($this,'field_types_'.$this->oProps->strClassName,$this->oProps->arrFieldTypeDefinitions);} public function setUp(){} protected function addSettingFields($arrField1,$arrField2=null,$_and_more=null){foreach(func_get_args() as $arrField)$this->addSettingField($arrField);} protected function addSettingField($arrField){if(!is_array($arrField))return;$arrField=$arrField+AmazonAutoLinks_AdminPageFramework_MetaBox_Properties::$arrStructure_Field;$arrField['strFieldID']=$this->oUtil->sanitizeSlug($arrField['strFieldID']);if(!isset($arrField['strFieldID'],$arrField['strType']))return;if(!$arrField['fIf'])return;if(in_array($GLOBALS['pagenow'],array('post.php','post-new.php',))&&((isset($_GET['post_type'])&&in_array($_GET['post_type'],$this->oProps->arrPostTypes))||(isset($_GET['post'],$_GET['action'])&&in_array(get_post_type($_GET['post']),$this->oProps->arrPostTypes)))){$this->setFieldHeadTagElements($arrField);}if(in_array($GLOBALS['pagenow'],array('post.php','post-new.php',))&&((isset($_GET['post_type'])&&in_array($_GET['post_type'],$this->oProps->arrPostTypes))||(isset($_GET['post'],$_GET['action'])&&in_array(get_post_type($_GET['post']),$this->oProps->arrPostTypes)))&&$arrField['strHelp']){$this->addHelpTextForFormFields($arrField['strTitle'],$arrField['strHelp'],$arrField['strHelpAside']);}$this->oProps->arrFields[$arrField['strFieldID']]=$arrField;} private function setFieldHeadTagElements($arrField){$strFieldType=$arrField['strType'];if(isset($GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'][$strFieldType])&&$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'][$strFieldType])return;$GLOBALS['arrAmazonAutoLinks_AdminPageFramework']['arrFieldFlags'][$strFieldType]=true;if(!isset($this->oProps->arrFieldTypeDefinitions[$strFieldType]))return;if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callFieldLoader']))call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callFieldLoader'],array());if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetScripts']))$this->oProps->strScript.=call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetScripts'],array());if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetStyles']))$this->oProps->strStyle.=call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetStyles'],array());if(is_callable($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetIEStyles']))$this->oProps->strStyleIE.=call_user_func_array($this->oProps->arrFieldTypeDefinitions[$strFieldType]['callGetIEStyles'],array());$this->oHeadTag->enqueueStyles($this->oProps->arrFieldTypeDefinitions[$strFieldType]['arrEnqueueStyles']);$this->oHeadTag->enqueueScripts($this->oProps->arrFieldTypeDefinitions[$strFieldType]['arrEnqueueScripts']);} public function removeMediaLibraryTab($arrTabs){if(!isset($_REQUEST['enable_external_source']))return $arrTabs;if(!$_REQUEST['enable_external_source'])unset($arrTabs['type_url']);return $arrTabs;} public function replaceThickBoxText($strTranslated,$strText){if(!in_array($GLOBALS['pagenow'],array('media-upload.php','async-upload.php')))return $strTranslated;if($strText!='Insert into Post')return $strTranslated;if($this->oUtil->getQueryValueInURLByKey(wp_get_referer(),'referrer')!='admin_page_framework')return $strTranslated;if(isset($_GET['button_label']))return $_GET['button_label'];return $this->oProps->strThickBoxButtonUseThis?$this->oProps->strThickBoxButtonUseThis:$this->oMsg->___('use_this_image');} public function addMetaBox(){foreach($this->oProps->arrPostTypes as $strPostType)add_meta_box($this->oProps->strMetaBoxID,$this->oProps->strTitle,array($this,'echoMetaBoxContents'),$strPostType,$this->oProps->strContext,$this->oProps->strPriority,$this->oProps->arrFields);} public function echoMetaBoxContents($oPost,$vArgs){$strOut=wp_nonce_field($this->oProps->strMetaBoxID,$this->oProps->strMetaBoxID,true,false);$strOut.='<table class="form-table">';$this->setOptionArray($oPost->ID,$vArgs['args']);foreach(( array )$vArgs['args'] as $arrField){$arrField=$arrField+AmazonAutoLinks_AdminPageFramework_MetaBox_Properties::$arrStructure_Field;$strStoredValue=get_post_meta($oPost->ID,$arrField['strFieldID'],true);$arrField['vValue']=$strStoredValue?$strStoredValue:$arrField['vValue'];$arrField['strCapability']=isset($arrField['strCapability'])?$arrField['strCapability']:$this->oProps->strCapability;if(!current_user_can($arrField['strCapability']))continue;if($arrField['strType']=='hidden'){$strOut.="<tr><td style='height: 0; padding: 0; margin: 0; line-height: 0;'>".$this->getFieldOutput($arrField)."</td></tr>";continue;}$strOut.="<tr>";if(!$arrField['fHideTitleColumn'])$strOut.="<th><label for='{$arrField['strFieldID']}'>"."<a id='{$arrField['strFieldID']}'></a>"."<span title='".strip_tags(isset($arrField['strTip'])?$arrField['strTip']:$arrField['strDescription'])."'>".$arrField['strTitle']."</span>"."</label></th>";$strOut.="<td>";$strOut.=$this->getFieldOutput($arrField);$strOut.="</td>";$strOut.="</tr>";}$strOut.='</table>';echo $strOut;} private function setOptionArray($intPostID,$arrFields){if(!is_array($arrFields))return;foreach($arrFields as $intIndex=>$arrField){$arrField=$arrField+AmazonAutoLinks_AdminPageFramework_MetaBox_Properties::$arrStructure_Field;$this->oProps->arrOptions[$intIndex]=get_post_meta($intPostID,$arrField['strFieldID'],true);}} private function getFieldOutput($arrField){$arrField['strName']=isset($arrField['strName'])?$arrField['strName']:$arrField['strFieldID'];$strFieldType=isset($this->oProps->arrFieldTypeDefinitions[$arrField['strType']]['callRenderField'])&&is_callable($this->oProps->arrFieldTypeDefinitions[$arrField['strType']]['callRenderField'])?$arrField['strType']:'default';$oField=new AmazonAutoLinks_AdminPageFramework_InputField($arrField,$this->oProps->arrOptions,array(),$this->oProps->arrFieldTypeDefinitions[$strFieldType],$this->oMsg);$oField->isMetaBox(true);$strFieldOutput=$oField->getInputField($strFieldType);unset($oField);return $this->oUtil->addAndApplyFilters($this,array($this->oProps->strClassName.'_'.'field_'.$arrField['strFieldID'],'field_'.$this->oProps->strClassName.'_'.$arrField['strFieldID']),$strFieldOutput,$arrField);} public function saveMetaBoxFields($intPostID){if(defined('DOING_AUTOSAVE')&&DOING_AUTOSAVE)return;if(!isset($_POST[$this->oProps->strMetaBoxID])||!wp_verify_nonce($_POST[$this->oProps->strMetaBoxID],$this->oProps->strMetaBoxID))return;if(in_array($_POST['post_type'],$this->oProps->arrPostTypes)&&((!current_user_can($this->oProps->strCapability,$intPostID))||(!current_user_can($this->oProps->strCapability,$intPostID))))return;$arrInput=array();foreach($this->oProps->arrFields as $arrField)$arrInput[$arrField['strFieldID']]=isset($_POST[$arrField['strFieldID']])?$_POST[$arrField['strFieldID']]:null;$arrOriginal=array();foreach($arrInput as $strFieldID=>$v)$arrOriginal[$strFieldID]=get_post_meta($intPostID,$strFieldID,true);$arrInput=$this->oUtil->addAndApplyFilters($this,"validation_{$this->oProps->strClassName}",$arrInput,$arrOriginal);foreach($arrInput as $strFieldID=>$vValue){$strOldValue=isset($arrOriginal[$strFieldID])?$arrOriginal[$strFieldID]:null;if(!is_null($vValue)&&$vValue!=$strOldValue){update_post_meta($intPostID,$strFieldID,$vValue);continue;}}}function __call($strMethodName,$arrArgs=null){if($strMethodName==$this->oProps->strPrefixStart.$this->oProps->strClassName)return;if(substr($strMethodName,0,strlen('field_'.$this->oProps->strClassName.'_'))=='field_'.$this->oProps->strClassName.'_')return $arrArgs[0];if(substr($strMethodName,0,strlen($this->oProps->strClassName.'_'.'field_'))==$this->oProps->strClassName.'_'.'field_')return $arrArgs[0];if(substr($strMethodName,0,strlen("field_types_{$this->oProps->strClassName}"))=="field_types_{$this->oProps->strClassName}")return $arrArgs[0];if(substr($strMethodName,0,strlen("script_{$this->oProps->strClassName}"))=="script_{$this->oProps->strClassName}")return $arrArgs[0];if(substr($strMethodName,0,strlen("style_{$this->oProps->strClassName}"))=="style_{$this->oProps->strClassName}")return $arrArgs[0];if(substr($strMethodName,0,strlen("validation_{$this->oProps->strClassName}"))=="validation_{$this->oProps->strClassName}")return $arrArgs[0];}}endif;